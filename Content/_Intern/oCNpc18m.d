
//
//Only for demonstration purposes. Usage at your own risk.
//Only for Gothic I version 1.08k_mod (current Player-Kit)
//

////////////////////////////////////////////////////////////////////////////////
//                                                             //
//                   zCObject                                  //
//                                                             //
////////////////////////////////////////////////////////////////////////////////

//NOTE: Bit field mask consts:     BitCount    FirstBit
CONST INT ZCOBJECT_HASHINDEX=((1 << 16)- 1)<< 0;

CLASS ZCOBJECT
{
 VAR INT _VTBL;//0x0000
 VAR INT REFCTR;//0x0004 int
 VAR INT HASHINDEX;//0x0008 zWORD
 VAR INT HASHNEXT;//0x000C zCObject*
 VAR STRING OBJECTNAME;//0x0010 zSTRING
};//0x0024

////////////////////////////////////////////////////////////////////////////////
//                                                             //
//                    zCVob                                    //
//                                                             //
////////////////////////////////////////////////////////////////////////////////

CONST INT ZCVOB_BITFIELD0_SHOWVISUAL	=((1 << 1)- 1)<< 0;
CONST INT ZCVOB_BITFIELD0_DRAWBBOX3D	=((1 << 1)- 1)<< 1;
CONST INT ZCVOB_BITFIELD0_VISUALALPHAENABLED	=((1 << 1)- 1)<< 2;
CONST INT ZCVOB_BITFIELD0_PHYSICSENABLED	=((1 << 1)- 1)<< 3;
CONST INT ZCVOB_BITFIELD0_STATICVOB	=((1 << 1)- 1)<< 4;
CONST INT ZCVOB_BITFIELD0_IGNOREDBYTRACERAY	=((1 << 1)- 1)<< 5;
CONST INT ZCVOB_BITFIELD0_COLLDETECTIONSTATIC=((1 << 1)- 1)<< 6;
CONST INT ZCVOB_BITFIELD0_COLLDETECTIONDYNAMIC=((1 << 1)- 1)<< 7;
CONST INT ZCVOB_BITFIELD0_CASTDYNSHADOW	=((1 << 2)- 1)<< 8;
CONST INT ZCVOB_BITFIELD0_LIGHTCOLORSTATDIRTY=((1 << 1)- 1)<< 10;
CONST INT ZCVOB_BITFIELD0_LIGHTCOLORDYNDIRTY	=((1 << 1)- 1)<< 11;
CONST INT ZCVOB_BITFIELD1_ISINMOVEMENTMODE=((1 << 2)- 1)<< 0;
CONST INT ZCVOB_BITFIELD2_SLEEPINGMODE=((1 << 2)- 1)<< 0;
CONST INT ZCVOB_BITFIELD2_MBHINTTRAFOLOCALCONST=((1 << 1)- 1)<< 2;
CONST INT ZCVOB_BITFIELD2_MBINSIDEENDMOVEMENTMETHOD=((1 << 1)- 1)<< 3;
CONST INT ZCVOB_BITFIELD3_VISUALCAMALIGN	=((1 << 2)- 1)<< 0;
CONST INT ZCVOB_BITFIELD4_COLLBUTNOMOVE	=((1 << 8)- 1)<< 0;
CONST INT ZCVOB_BITFIELD4_DONTWRITEINTOARCHIVE=((1 << 1)- 1)<< 8;

CLASS ZCVOB
{
//zCObject {
 VAR INT _VTBL;
 VAR INT _ZCOBJECT_REFCTR;
 VAR INT _ZCOBJECT_HASHINDEX;
 VAR INT _ZCOBJECT_HASHNEXT;
 VAR STRING _ZCOBJECT_OBJECTNAME;
//}
 VAR INT GLOBALVOBTREENODE;	//0x0024 zCTree<zCVob>*
 VAR INT LASTTIMEDRAWN;	//0x0028 zTFrameCtr
 VAR INT LASTTIMECOLLECTED;	//0x002C zDWORD
//zCArray<zCBspLeaf*> {
 VAR INT VOBLEAFLIST_ARRAY;	//0x0030 zCBspLeaf**
 VAR INT VOBLEAFLIST_NUMALLOC;//0x0034 int
 VAR INT VOBLEAFLIST_NUMINARRAY;//0x0038 int
//}
 VAR INT TRAFOOBJTOWORLD[16];//0x003C zMATRIX4
//zTBBox3D {
 VAR INT BBOX3D_MINS[3];//0x007C zPOINT3
 VAR INT BBOX3D_MAXS[3];//0x0088 zPOINT3
//}
//zCArray<zCVob*> {
 VAR INT TOUCHVOBLIST_ARRAY;//0x0094 zCVob**
 VAR INT TOUCHVOBLIST_NUMALLOC;	//0x0098 int
 VAR INT TOUCHVOBLIST_NUMINARRAY;//0x009C int
//}
 VAR INT TYPE;//0x00A0 zTVobType
 VAR INT GROUNDSHADOWSIZEPACKED;//0x00A4 zDWORD
 VAR INT HOMEWORLD;	//0x00A8 zCWorld*
 VAR INT GROUNDPOLY;//0x00AC zCPolygon*
 VAR INT CALLBACK_AI;//0x00B0 zCAIBase*
 VAR INT TRAFO;	//0x00B4 zMATRIX4*
 VAR INT VISUAL;//0x00B8 zCVisual*
 VAR FLOAT VISUALALPHA;//0x00BC zREAL
 VAR INT RIGIDBODY;	//0x00C0 zCRigidBody*
 VAR INT LIGHTCOLORSTAT;//0x00C4 zCOLOR
 VAR INT LIGHTCOLORDYN;	//0x00C8 zCOLOR
 VAR INT LIGHTDIRECTIONSTAT[3];	//0x00CC zVEC3
 VAR INT VOBPRESETNAME;	//0x00D8 zSTRING*
 VAR INT EVENTMANAGER;//0x00DC zCEventManager*
 VAR INT NEXTONTIMER;//0x00E0 zREAL
 VAR INT BITFIELD[5];//0x00E4 zCVob_bitfieldX_Xxx
 VAR INT M_POCOLLISIONOBJECTCLASS;//0x00F8 zCCollisionObjectDef*
 VAR INT M_POCOLLISIONOBJECT;//0x00FC zCCollisionObject*
};//0x0100

////////////////////////////////////////////////////////////////////////////////
//                                                             //
//                    oCNpc                                    //
//                                                             //
////////////////////////////////////////////////////////////////////////////////

CONST INT OCMAGFRONTIER_BITFIELD_ISWARNING=((1 << 1)- 1)<< 0;
CONST INT OCMAGFRONTIER_BITFIELD_ISSHOOTING=((1 << 1)- 1)<< 1;

CONST INT OCNPC_BITFIELD0_SHOWAIDEBUG=((1 << 1)- 1)<< 0;
CONST INT OCNPC_BITFIELD0_SHOWNEWS	=((1 << 1)- 1)<< 1;
CONST INT OCNPC_BITFIELD0_CSALLOWEDASROLE=((1 << 1)- 1)<< 2;
CONST INT OCNPC_BITFIELD0_ISSUMMONED=((1 << 1)- 1)<< 3;
CONST INT OCNPC_BITFIELD0_RESPAWNON	=((1 << 1)- 1)<< 4;
CONST INT OCNPC_BITFIELD0_MOVLOCK=((1 << 1)- 1)<< 5;
CONST INT OCNPC_BITFIELD0_DRUNK	=((1 << 1)- 1)<< 6;
CONST INT OCNPC_BITFIELD0_MAD=((1 << 1)- 1)<< 7;
CONST INT OCNPC_BITFIELD0_OVERLAY_WOUNDED=((1 << 1)- 1)<< 8;
CONST INT OCNPC_BITFIELD0_INONDAMAGE=((1 << 1)- 1)<< 9;
CONST INT OCNPC_BITFIELD0_AUTOREMOVEWEAPON	=((1 << 1)- 1)<< 10;
CONST INT OCNPC_BITFIELD0_OPENINVENTORY	=((1 << 1)- 1)<< 11;
CONST INT OCNPC_BITFIELD0_ASKROUTINE=((1 << 1)- 1)<< 12;
CONST INT OCNPC_BITFIELD0_SPAWNINRANGE	=((1 << 1)- 1)<< 13;
CONST INT OCNPC_BITFIELD1_BODY_TEXVARNR	=((1 << 16)- 1)<< 0;
CONST INT OCNPC_BITFIELD1_BODY_TEXCOLORNR=((1 << 1)- 1)<< 16;
CONST INT OCNPC_BITFIELD2_HEAD_TEXVARNR	=((1 << 16)- 1)<< 0;
CONST INT OCNPC_BITFIELD2_TEETH_TEXVARNR=((1 << 16)- 1)<< 16;
CONST INT OCNPC_BITFIELD3_GUILDTRUE	=((1 << 8)- 1)<< 0;
CONST INT OCNPC_BITFIELD3_DRUNK_HEAL=((1 << 8)- 1)<< 8;
CONST INT OCNPC_BITFIELD3_MAD_HEAL	=((1 << 8)- 1)<< 16;
CONST INT OCNPC_BITFIELD3_SPELLS=((1 << 8)- 1)<< 24;
CONST INT OCNPC_BITFIELD4_BODYSTATE	=((1 << 19)- 1)<< 0;

CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_STAND	=((1 << 1)- 1)<< 0;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_DIRCHOOSED=((1 << 1)- 1)<< 1;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_EXACTPOSITION	=((1 << 1)- 1)<< 2;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_TARGETREACHED	=((1 << 1)- 1)<< 3;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_STANDIFTARGETREACHED=((1 << 1)- 1)<< 4;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_WAITING=((1 << 1)- 1)<< 5;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_ISOBSTVOBSMALL=((1 << 1)- 1)<< 6;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_TARGETVISIBLE	=((1 << 1)- 1)<< 7;
CONST INT OCNPC_OTROBUSTTRACE_BITFIELD_USECHASMCHECKS=((1 << 1)- 1)<< 8;

CLASS OCNPC
{
//zCVob {
 //zCObject {
 VAR INT _VTBL;
 VAR INT _ZCOBJECT_REFCTR;
 VAR INT _ZCOBJECT_HASHINDEX;
 VAR INT _ZCOBJECT_HASHNEXT;
 VAR STRING _ZCOBJECT_OBJECTNAME;
 //}
 VAR INT _ZCVOB_GLOBALVOBTREENODE;
 VAR INT _ZCVOB_LASTTIMEDRAWN;
 VAR INT _ZCVOB_LASTTIMECOLLECTED;
 VAR INT _ZCVOB_VOBLEAFLIST_ARRAY;
 VAR INT _ZCVOB_VOBLEAFLIST_NUMALLOC;
 VAR INT _ZCVOB_VOBLEAFLIST_NUMINARRAY;
 VAR INT _ZCVOB_TRAFOOBJTOWORLD[16];
 VAR INT _ZCVOB_BBOX3D_MINS[3];
 VAR INT _ZCVOB_BBOX3D_MAXS[3];
 VAR INT _ZCVOB_TOUCHVOBLIST_ARRAY;
 VAR INT _ZCVOB_TOUCHVOBLIST_NUMALLOC;
 VAR INT _ZCVOB_TOUCHVOBLIST_NUMINARRAY;
 VAR INT _ZCVOB_TYPE;//130-Normal?(Human,Wolf) 129-Noname,noweaponcollide,nofocus
 VAR INT _ZCVOB_GROUNDSHADOWSIZEPACKED;
 VAR INT _ZCVOB_HOMEWORLD;
 VAR INT _ZCVOB_GROUNDPOLY;
 VAR INT _ZCVOB_CALLBACK_AI;
 VAR INT _ZCVOB_TRAFO;
 VAR INT _ZCVOB_VISUAL;
 VAR FLOAT _ZCVOB_VISUALALPHA;
 VAR INT _ZCVOB_RIGIDBODY;
 VAR INT _ZCVOB_LIGHTCOLORSTAT;
 VAR INT _ZCVOB_LIGHTCOLORDYN;
 VAR INT _ZCVOB_LIGHTDIRECTIONSTAT[3];
 VAR INT _ZCVOB_VOBPRESETNAME;
 VAR INT _ZCVOB_EVENTMANAGER;
 VAR INT _ZCVOB_NEXTONTIMER;
 VAR INT _ZCVOB_BITFIELD[5];
 VAR INT _ZCVOB_M_POCOLLISIONOBJECTCLASS;
 VAR INT _ZCVOB_M_POCOLLISIONOBJECT;
//}
 VAR INT IDX;//0x0100 int
 VAR STRING NAME;//0x0104 zSTRING[5]
 VAR STRING NAME_1;
 VAR STRING NAME_2;
 VAR STRING NAME_3;
 VAR STRING NAME_4;
 VAR STRING SLOT;//0x0168 zSTRING
 VAR INT NPCTYPE;//0x017C int
 VAR INT VARIOUSFLAGS;//0x0180 int
 VAR INT ATTRIBUTE[8];//0x0184 int[NPC_ATR_MAX]
 VAR INT PROTECTION[8];//0x01A4 int[oEDamageIndex_MAX]
 VAR INT DAMAGE[8];//0x01C4 int[oEDamageIndex_MAX]
 VAR INT DAMAGETYPE;	//0x01E4 int
 VAR INT GUILD;//0x01E8 int
 VAR INT LEVEL;//0x01EC int
 VAR FUNC MISSION[5];	//0x01F0 int[NPC_MIS_MAX]
 VAR INT FIGHTTACTIC;//0x0204 int
 VAR INT FMODE;//0x0208 int
 VAR INT VOICE;//0x020C int
 VAR INT VOICEPITCH;	//0x0210 int
 VAR INT MASS;//0x0214 int
 VAR FUNC DAILY_ROUTINE;//0x0218 int
 VAR FUNC STARTAISTATE;//0x021C int
 VAR STRING SPAWNPOINT;	//0x0220 zSTRING
 VAR INT SPAWNDELAY;	//0x0234 int
 VAR INT SENSES;	//0x0238 int
 VAR INT SENSES_RANGE;//0x023C int
 VAR INT AISCRIPTVARS[50];//0x0240 int[50]
 VAR STRING WPNAME;	//0x0308 zSTRING
 VAR INT EXPERIENCE_POINTS;//0x031C zUINT32
 VAR INT EXPERIENCE_POINTS_NEXT_LEVEL;//0x0320 zUINT32
 VAR INT LEARN_POINTS;//0x0324 zUINT32
 VAR INT PARSEREND;//0x0328 int
 VAR INT BLOODENABLED;//0x032C int
 VAR INT BLOODDISTANCE;//0x0330 int
 VAR INT BLOODAMOUNT;//0x0334 int
 VAR INT BLOODFLOW;//0x0338 int
 VAR STRING BLOODEMITTER;//0x033C zSTRING
 VAR STRING BLOODTEXTURE;//0x0350 zSTRING
 VAR INT DIDHIT;	//0x0364 zBOOL
 VAR INT DIDPARADE;//0x0368 zBOOL
 VAR INT DIDSHOOT;//0x036C zBOOL
 VAR INT HASLOCKEDENEMY;	//0x0370 zBOOL
 VAR INT ISDEFENDING;//0x0374 zBOOL
 VAR INT WASAIMING;//0x0378 zBOOL
 VAR INT ENEMY;//0x037C oCNpc*
 VAR INT SPEEDTURN;//0x0380 zREAL
 VAR INT FOUNDFLEEPOINT;	//0x0384 zBOOL
 VAR INT REACHEDFLEEPOINT;//0x0388 zBOOL
 VAR INT VECFLEE[3];	//0x038C zVEC3
 VAR INT POSFLEE[3];	//0x0398 zVEC3
 VAR INT WAYPOINTFLEE;//0x03A4 zCWaypoint*
//oTRobustTrace {
 VAR INT RBT_BITFIELD;//0x03A8 oCNpc_oTRobustTrace_bitfield_Xxx
 VAR INT RBT_TARGETPOS[3];//0x03AC zVEC3
 VAR INT RBT_TARGETVOB;//0x03B8 zCVob*
 VAR INT RBT_OBSTVOB;//0x03BC zCVob*
 VAR INT RBT_TARGETDIST;	//0x03C0 zREAL
 VAR INT RBT_LASTTARGETDIST;	//0x03C4 zREAL
 VAR INT RBT_MAXTARGETDIST;//0x03C8 zREAL
 VAR INT RBT_DIRTURN;//0x03CC zREAL
 VAR INT RBT_TIMER;//0x03D0 zREAL
 VAR INT RBT_DIRFIRST[3];//0x03D4 zVEC3
 VAR INT RBT_DIRLASTANGLE;//0x03E0 zREAL
 //zCArray<oTDirectionInfo*> {
 VAR INT RBT_LASTDIRECTIONS_ARRAY;//0x03E4 oTDirectionInfo**
 VAR INT RBT_LASTDIRECTIONS_NUMALLOC;//0x03E8 int
 VAR INT RBT_LASTDIRECTIONS_NUMINARRAY;//0x03EC int
 //}
 VAR INT RBT_FRAMECTR;//0x03F0 int
 VAR INT RBT_TARGETPOSARRAY[15];	//0x03F4 zVEC3[5]
 VAR INT RBT_TARGETPOSCOUNTER;//0x0430 int
 VAR INT RBT_TARGETPOSINDEX;	//0x0434 int
 VAR INT RBT_CHECKVISIBILITYTIME;//0x0438 zREAL
 VAR INT RBT_POSITIONUPDATETIME;	//0x043C zREAL
 VAR INT RBT_FAILUREPOSSIBILITY;	//0x0440 zREAL
//}
//zCList<oCNpcTimedOverlay> {
 VAR INT TIMEDOVERLAYS_DATA;	//0x0444 oCNpcTimedOverlay*
 VAR INT TIMEDOVERLAYS_NEXT;	//0x0448 zCList<oCNpcTimedOverlay>*
//}
//zCArray<oCNpcTalent*> {
 VAR INT TALENTS_ARRAY;//0x044C oCNpcTalent**
 VAR INT TALENTS_NUMALLOC;//0x0450 int
 VAR INT TALENTS_NUMINARRAY;	//0x0454 int
//}
 VAR INT SPELLMANA;//0x0458 int
 VAR INT VISUALFX;//0x045C oCVisualFX*
//oCMagFrontier {
 VAR INT MAGFRONTIER_WARNINGFX;//0x0460 oCVisualFX*
 VAR INT MAGFRONTIER_SHOOTFX;//0x0464 oCVisualFX*
 VAR INT MAGFRONTIER_NPC;//0x0468 oCNpc*
 VAR INT MAGFRONTIER_BITFIELD;//0x046C oCMagFrontier_bitfield_Xxx
//}
//oCNpc_States {
 VAR INT STATE_VTBL;	//0x0470
 VAR STRING STATE_NAME;	//0x0474 zSTRING
 VAR INT STATE_NPC;//0x0488 oCNpc*
 //TNpcAIState {
 VAR INT STATE_CURSTATE_INDEX;//0x048C int
 VAR INT STATE_CURSTATE_LOOP;//0x0490 int
 VAR INT STATE_CURSTATE_END;	//0x0494 int
 VAR INT STATE_CURSTATE_TIMEBEHAVIOUR;//0x0498 int
 VAR INT STATE_CURSTATE_RESTTIME;//0x049C zREAL
 VAR INT STATE_CURSTATE_PHASE;//0x04A0 int
 VAR INT STATE_CURSTATE_VALID;//0x04A4 zBOOL
 VAR STRING STATE_CURSTATE_NAME;//0x04A8 zSTRING
 VAR INT STATE_CURSTATE_STATETIME;//0x04BC zREAL
 VAR INT STATE_CURSTATE_PRGINDEX;//0x04C0 int
 VAR INT STATE_CURSTATE_ISRTNSTATE;//0x04C4 zBOOL
 //}
 //TNpcAIState {
 VAR INT STATE_NEXTSTATE_INDEX;//0x04C8 int
 VAR INT STATE_NEXTSTATE_LOOP;//0x04CC int
 VAR INT STATE_NEXTSTATE_END;//0x04D0 int
 VAR INT STATE_NEXTSTATE_TIMEBEHAVIOUR;//0x04D4 int
 VAR INT STATE_NEXTSTATE_RESTTIME;//0x04D8 zREAL
 VAR INT STATE_NEXTSTATE_PHASE;//0x04DC int
 VAR INT STATE_NEXTSTATE_VALID;//0x04E0 zBOOL
 VAR STRING STATE_NEXTSTATE_NAME;//0x04E4 zSTRING
 VAR INT STATE_NEXTSTATE_STATETIME;//0x04F8 zREAL
 VAR INT STATE_NEXTSTATE_PRGINDEX;//0x04FC int
 VAR INT STATE_NEXTSTATE_ISRTNSTATE;	//0x0500 zBOOL
 //}
 VAR INT STATE_LASTAISTATE;//0x0504 int
 VAR INT STATE_HASROUTINE;//0x0508 zBOOL
 VAR INT STATE_RTNCHANGED;//0x050C zBOOL
 VAR INT STATE_RTNBEFORE;//0x0510 oCRtnEntry*
 VAR INT STATE_RTNNOW;//0x0514 oCRtnEntry*
 VAR INT STATE_RTNROUTE;	//0x0518 zCRoute*
 VAR INT STATE_RTNOVERLAY;//0x051C zBOOL
 VAR INT STATE_RTNOVERLAYCOUNT;//0x0520 int
 VAR INT STATE_WALKMODE_ROUTINE;	//0x0524 int
 VAR INT STATE_WEAPONMODE_ROUTINE;//0x0528 zBOOL
 VAR INT STATE_STARTNEWROUTINE;//0x052C zBOOL
 VAR INT STATE_AISTATEDRIVEN;//0x0530 int
 VAR INT STATE_AISTATEPOSITION[3];//0x0534 zVEC3
 VAR INT STATE_PAROTHER;	//0x0540 oCNpc*
 VAR INT STATE_PARVICTIM;//0x0544 oCNpc*
 VAR INT STATE_PARITEM;//0x0548 oCItem*
 VAR INT STATE_RNTCHANGECOUNT;//0x054C int
//}
//oCNpcInventory {
 //oCItemContainer {
 VAR INT INVENTORY2_VTBL;//0x0550
 VAR INT INVENTORY2_OCITEMCONTAINER_CONTENTS;//0x0554 zCListSort<oCItem>*
 VAR INT INVENTORY2_OCITEMCONTAINER_NPC;	//0x0558 oCNpc*//open TAB inventory
 VAR INT INVENTORY2_OCITEMCONTAINER_SELECTEDITEM;//0x055C int//selected item position
 VAR INT INVENTORY2_OCITEMCONTAINER_OFFSET;//0x0560 int
 VAR INT INVENTORY2_OCITEMCONTAINER_DRAWITEMMAX;	//0x0564 int
 VAR INT INVENTORY2_OCITEMCONTAINER_ITEMLISTMODE;//0x0568 oTItemListMode
 VAR INT INVENTORY2_OCITEMCONTAINER_FRAME;//0x056C zBOOL
 VAR INT INVENTORY2_OCITEMCONTAINER_RIGHT;//0x0570 zBOOL
 VAR INT INVENTORY2_OCITEMCONTAINER_OWNLIST;	//0x0574 zBOOL
 VAR INT INVENTORY2_OCITEMCONTAINER_PREPARED;//0x0578 zBOOL
 VAR INT INVENTORY2_OCITEMCONTAINER_PASSIVE;	//0x057C zBOOL
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWCAT;	//0x0580 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEM;//0x0584 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMACTIVE;//0x0588 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMHIGHTLIGHTED;//0x058C zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMACTIVEHIGHLIGHTED;//0x0590 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMFOCUS;//0x0594 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMACTIVEFOCUS;	//0x0598 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMHIGHTLIGHTEDFOCUS;//0x059C zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMACTIVEHIGHLIGHTEDFOCUS;//0x05A0 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMINFO;//0x05A4 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWITEMINFOITEM;//0x05A8 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_TEXTVIEW;//0x05AC zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWARROWATTOP;//0x05B0 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_VIEWARROWATBOTTOM;//0x05B4 zCView*
 VAR INT INVENTORY2_OCITEMCONTAINER_RNDWORLD;//0x05B8 zCWorld*
 VAR INT INVENTORY2_OCITEMCONTAINER_POSX;//0x05BC int
 VAR INT INVENTORY2_OCITEMCONTAINER_POSY;//0x05C0 int
 VAR STRING INVENTORY2_OCITEMCONTAINER_TEXTCATEGORYSTATIC;//0x05C4 zSTRING
 VAR INT INVENTORY2_OCITEMCONTAINER_M_BMANIPULATEITEMSDISABLED;//0x05D8 zBOOL
 VAR INT INVENTORY2_OCITEMCONTAINER_M_BCANTRANSFERMORETHANONEITEM;//0x05DC zBOOL
 VAR INT INVENTORY2_OCITEMCONTAINER_IMAGE_CHROMA;//0x05E0 zCOLOR
 VAR INT INVENTORY2_OCITEMCONTAINER_BLIT_CHROMA;	//0x05E4 zCOLOR
 //}
 VAR INT INVENTORY2_OWNER;//0x05E8 oCNpc*
 VAR INT INVENTORY2_PACKABILITY;	//0x05EC zBOOL
 //zCListSort<oCItem>[INV_MAX] {
 VAR INT INVENTORY2_INVENTORY0_COMPARE;//0x05F0 int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY0_DATA;	//0x05F4 oCItem*
 VAR INT INVENTORY2_INVENTORY0_NEXT;	//0x05F8 zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY1_COMPARE;//0x05FC int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY1_DATA;	//0x0600 oCItem*
 VAR INT INVENTORY2_INVENTORY1_NEXT;	//0x0604 zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY2_COMPARE;//0x0608 int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY2_DATA;	//0x060C oCItem*
 VAR INT INVENTORY2_INVENTORY2_NEXT;	//0x0610 zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY3_COMPARE;//0x0614 int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY3_DATA;	//0x0618 oCItem*
 VAR INT INVENTORY2_INVENTORY3_NEXT;	//0x061C zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY4_COMPARE;//0x0620 int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY4_DATA;	//0x0624 oCItem*
 VAR INT INVENTORY2_INVENTORY4_NEXT;	//0x0628 zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY5_COMPARE;//0x062C int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY5_DATA;	//0x0630 oCItem*
 VAR INT INVENTORY2_INVENTORY5_NEXT;	//0x0634 zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY6_COMPARE;//0x0638 int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY6_DATA;	//0x063C oCItem*
 VAR INT INVENTORY2_INVENTORY6_NEXT;	//0x0640 zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY7_COMPARE;//0x0644 int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY7_DATA;	//0x0648 oCItem*
 VAR INT INVENTORY2_INVENTORY7_NEXT;	//0x064C zCListSort<oCItem>*
 VAR INT INVENTORY2_INVENTORY8_COMPARE;//0x0650 int(_cdecl*)(oCItem*,oCItem*)
 VAR INT INVENTORY2_INVENTORY8_DATA;	//0x0654 oCItem*
 VAR INT INVENTORY2_INVENTORY8_NEXT;	//0x0658 zCListSort<oCItem>*
 //}
 VAR STRING INVENTORY2_PACKSTRING;//0x065C zSTRING[INV_MAX]
 VAR STRING INVENTORY2_PACKSTRING_1;
 VAR STRING INVENTORY2_PACKSTRING_2;
 VAR STRING INVENTORY2_PACKSTRING_3;
 VAR STRING INVENTORY2_PACKSTRING_4;
 VAR STRING INVENTORY2_PACKSTRING_5;
 VAR STRING INVENTORY2_PACKSTRING_6;
 VAR STRING INVENTORY2_PACKSTRING_7;
 VAR STRING INVENTORY2_PACKSTRING_8;
 VAR INT INVENTORY2__OFFSET[9];//0x0710 int[INV_MAX]
 VAR INT INVENTORY2__ITEMNR[9];//0x0734 int[INV_MAX]
 VAR INT INVENTORY2_MAXSLOTS[9];	//0x0758 int[INV_MAX]
 VAR INT INVENTORY2_INVNR;//0x077C int
//}
 VAR INT TRADER;	//0x0780 oCItemContainer*
 VAR INT TRADENPC;//0x0784 oCNpc*
 VAR INT RANGETOPLAYER;//0x0788 zREAL
//zCArray<zTSoundHandle> {
 VAR INT LISTOFVOICEHANDLES_ARRAY;//0x078C zTSoundHandle*
 VAR INT LISTOFVOICEHANDLES_NUMALLOC;//0x0790 int
 VAR INT LISTOFVOICEHANDLES_NUMINARRAY;//0x0794 int
//}
 VAR INT VOICEINDEX;	//0x0798 int
 VAR INT BITFIELD[5];//0x079C oCNpc_bitfieldX_Xxx
 VAR INT INSTANZ;//0x07B0 int
 VAR STRING MDS_NAME;//0x07B4 zSTRING
 VAR STRING BODY_VISUALNAME;//0x07C8 zSTRING
 VAR STRING HEAD_VISUALNAME;//0x07DC zSTRING
 VAR INT MODEL_SCALE[3];	//0x07F0 VEC3
 VAR INT MODEL_FATNESS;//0x07FC zREAL
 VAR INT NAMENR;	//0x0800 int
 VAR INT HPHEAL;	//0x0804 zREAL
 VAR INT MANAHEAL;//0x0808 zREAL
 VAR INT SWIMTIME;//0x080C zREAL
 VAR INT DIVETIME;//0x0810 zREAL
 VAR INT DIVECTR;//0x0814 zREAL
 VAR INT FIREVOB;//0x0818 zCVob*
 VAR INT FIREDAMAGE;	//0x081C int
 VAR INT FIREDAMAGETIMER;//0x0820 zREAL
 VAR INT ATTITUDE;//0x0824 int
 VAR INT TMP_ATTITUDE;//0x0828 int
 VAR INT ATTTIMER;//0x082C zREAL
 VAR INT KNOWSPLAYER;//0x0830 int
 VAR INT PERCLIST[66];//0x0834 TNpcPerc[NPC_PERC_MAX] { int percID; int percFunc }
 VAR INT PERCACTIVE;	//0x093C int
 VAR INT PERCACTIVETIME;	//0x0940 zREAL
 VAR INT PERCACTIVEDELTA;//0x0944 zREAL
 VAR INT OVERRIDEFALLDOWNHEIGHT;	//0x0948 zBOOL
 VAR INT FALLDOWNHEIGHT;	//0x094C zREAL
 VAR INT FALLDOWNDAMAGE;	//0x0950 int
 VAR INT MAG_BOOK;//0x0954 oCMag_Book*
//zCList<oCSpell> {
 VAR INT ACTIVESPELLS_DATA;//0x0958 oCSpell*
 VAR INT ACTIVESPELLS_NEXT;//0x095C int
//}
//zCArray<zSTRING> {
 VAR INT ACTIVEOVERLAYS_ARRAY;//0x0960 zSTRING*
 VAR INT ACTIVEOVERLAYS_NUMALLOC;//0x0964 int
 VAR INT ACTIVEOVERLAYS_NUMINARRAY;//0x0968 int
//}
 VAR INT ASKBOX;	//0x096C oCAskBox*
 VAR INT ASKYES;	//0x0970 int
 VAR INT ASKNO;//0x0974 int
 VAR INT CANTALK;//0x0978 zREAL
 VAR INT TALKOTHER;//0x097C oCNpc*
 VAR INT INFO;//0x0980 oCInfo*
 VAR INT NEWS;//0x0984 oCNews*
 VAR INT CURMISSION;	//0x0988 oCMission*
//oCNewsMemory {
 VAR INT KNOWNNEWS_VTBL;	//0x098C
 //zCList<oCNews> {
 VAR INT KNOWNNEWS_IKNOW_DATA;//0x0990 oCNews*
 VAR INT KNOWNNEWS_IKNOW_NEXT;//0x0994 zCList<oCNews>*
 //}
//}
 VAR INT CARRY_VOB;//0x0998 zCVob*
 VAR INT INTERACTMOB;//0x099C oCMobInter*
 VAR INT INTERACTITEM;//0x09A0 oCItem*
 VAR INT INTERACTITEMCURRENTSTATE;//0x09A4 int
 VAR INT INTERACTITEMTARGETSTATE;//0x09A8 int
 VAR INT SCRIPT_AIPRIO;//0x09AC int
 VAR INT OLD_SCRIPT_STATE;//0x09B0 int
 VAR INT HUMAN_AI;//0x09B4 oCAIHuman*
 VAR INT ANICTRL;//0x09B8 oCAniCtrl_Human*
 VAR INT ROUTE;//0x09BC zCRoute*
 VAR INT DAMAGEMUL;//0x09C0 zREAL
 VAR INT CSG;//0x09C4 oCNpcMessage*
 VAR INT LASTLOOKMSG;//0x09C8 oCNpcMessage*
 VAR INT LASTPOINTMSG;//0x09CC oCNpcMessage*
//zCArray<zCVob*> {
 VAR INT VOBLIST_ARRAY;//0x09D0 zCVob**
 VAR INT VOBLIST_NUMALLOC;//0x09D4 int
 VAR INT VOBLIST_NUMINARRAY;	//0x09D8 int
//}
 VAR INT VOBCHECK_TIME;//0x09DC zREAL
 VAR INT PICKVOBDELAY;//0x09E0 zREAL
 VAR INT FOCUS_VOB;//0x09E4 zCVob*
//zCArray<TNpcSlot*> {
 VAR INT INVSLOT_ARRAY;//0x09E8 TNpcSlot**
 VAR INT INVSLOT_NUMALLOC;//0x09EC int
 VAR INT INVSLOT_NUMINARRAY;	//0x09F0 int
//}
//zCArray<TNpcSlot*> {
 VAR INT TMPSLOTLIST_ARRAY;//0x09F4 TNpcSlot**
 VAR INT TMPSLOTLIST_NUMALLOC;//0x09F8 int
 VAR INT TMPSLOTLIST_NUMINARRAY;	//0x09FC int
//}
 VAR INT FADEAWAYTIME;//0x0A00 zREAL
 VAR INT RESPAWNTIME;//0x0A04 zREAL
 VAR INT SELFDIST;//0x0A08 zREAL
 VAR INT FIGHTRANGEBASE;	//0x0A0C int
 VAR INT FIGHTRANGEFIST;	//0x0A10 int
 VAR INT FIGHT_WAITTIME;	//0x0A14 zREAL
 VAR INT FIGHT_WAITFORANIEND;//0x0A18 zTModelAniID
 VAR INT FIGHT_LASTSTRAFEFRAME;//0x0A1C zREAL
 VAR INT SOUNDTYPE;//0x0A20 int
 VAR INT SOUNDVOB;//0x0A24 zCVob*
 VAR INT SOUNDPOSITION[3];//0x0A28 zVEC3
 VAR INT PLAYERGROUP;//0x0A34 zCPlayerGroup*
};//0x0A38

