////////////////////////////////////////////////////////////////////////////////
//
//Convert an int that contains an IEEE binary32 floating point to a string.
//Copyright (c) 2009 Nico Bendlin <nicode@gmx.net>, Legal: WTFPL Version 2.
//
////////////////////////////////////////////////////////////////////////////////
//Note: "/** /// Unit testing" > "/**/// Unit testing" to add unit testing.
////////////////////////////////////////////////////////////////////////////////

/** /// Unit testing
func int PackedBcdValidate( var int a )
{
  var int b;

  b = a + 107374182;
  return !((((a | b) & ~(a & b)) & 286331152) || (((a >> 28) & 15) > 9));
};
/**/

//
//PackedBcdCarryBit holds the overflow flag after a PackedBcdAddition call.
//
VAR INT PACKEDBCDCARRYBIT;

//
//The addends are treated as valid 32-bit eight-digit unsigned Packed BCD.
//Note: The function is heavily optimized for code size, not for speed (it
//could immediately return a + b if a or b are 0). The least significant 7
//digits are added in one operation (includes propagating carries from one
//digit to the next). The most significant digit requires additional care.
//Note: The results of right-shift operations are sign-extended. Therefore
//we need to mask out this bits if a sign-bit might be set in the operand.
//
FUNC INT PACKEDBCDADDITION(VAR INT A,VAR INT B)
{
 VAR INT C;
 VAR INT D;
 VAR INT E;

 /** /// Unit testing
  if (!PackedBcdValidate( a )) {
    PrintDebug( ConcatStrings( "Float32ToString: Invalid BCD a = ", IntToString( a ) ) );
  };
  if (!PackedBcdValidate( b )) {
    PrintDebug( ConcatStrings( "Float32ToString: Invalid BCD b = ", IntToString( b ) ) );
  };
  /**/
 C=A + 107374182;//0x06666666
 D=B + C;
 C=(B | C)& ~(B & C);	//c ^= b
 E=~((C | D)& ~(C & D))& 286331152;//0x11111110
 D -=(E >> 2)|(E >> 3);
 PACKEDBCDCARRYBIT=(((D >> 28)& 15)> 9)||
((((A >> 28)& 15)+((B >> 28)& 15))> 9);
 IF(PACKEDBCDCARRYBIT){
	D +=1610612736;//0x60000000
 };
 RETURN D;
};

//
//Returns the count of left-hand zeros.
//
FUNC INT PACKEDBCDLH0COUNT(VAR INT A)
{
 IF(A & -65536){ //0xFFFF0000
	IF(A & -16777216){ //0xFF000000
 IF(A & -268435456){ //0xF0000000
		RETURN 0;
 };
 RETURN 1;
	};
	IF(A & 15728640){ //0x00F00000
 RETURN 2;
	};
	RETURN 3;
 };
 IF(A & 65280){ //0x0000FF00
	IF(A & 61440){ //0x0000F000
 RETURN 4;
	};
	RETURN 5;
 };
 IF(A & 240){ //0x000000F0
	RETURN 6;
 };
 IF(A){
	RETURN 7;
 };
 RETURN 8;
};

//
//Returns the count of right-hand zeros.
//
FUNC INT PACKEDBCDRH0COUNT(VAR INT A)
{
 IF(A & 65535){ //0x0000FFFF
	IF(A & 255){ //0x000000FF
 IF(A & 15){ //0x0000000F
		RETURN 0;
 };
 RETURN 1;
	};
	IF(A & 3840){ //0x00000F00
 RETURN 2;
	};
	RETURN 3;
 };
 IF(A & 16711680){ //0x00FF0000
	IF(A & 983040){ //0x000F0000
 RETURN 4;
	};
	RETURN 5;
 };
 IF(A & 251658240){ //0x0F000000
	RETURN 6;
 };
 IF(A){
	RETURN 7;
 };
 RETURN 8;
};

////////////////////////////////////////////////////////////////////////////////

FUNC STRING _FLOAT32TOSTRINGPREFIX(VAR INT N)
{
 IF(N){
	RETURN "-";
 };
 RETURN "";
};

//
//This array contains the result as a 96-digit unsigned Packed BCD list.
//Note: [0,4] are positive exponents, and [5,11] are negative exponents.
//
VAR INT _FLOAT32TOSTRINGRESULT[12];

//
//Returns Packed BCD value by array index 'i'.
//
FUNC INT _FLOAT32TOSTRINGGETBCD(VAR INT I)
{
 /** /// Unit testing
  if ((i < 0) || (i > 11)) {
    PrintDebug( ConcatStrings( "Float32ToString: GetBCD invalid i = ", IntToString( i ) ) );
    return 0;
  };
  /**/
 IF(I >=6){
	IF(I >=9){
 IF(I >=10){
		IF(I >=11){
 RETURN _FLOAT32TOSTRINGRESULT[11];
		};
		RETURN _FLOAT32TOSTRINGRESULT[10];
 };
 RETURN _FLOAT32TOSTRINGRESULT[9];
	};
	IF(I >=7){
 IF(I >=8){
		RETURN _FLOAT32TOSTRINGRESULT[8];
 };
 RETURN _FLOAT32TOSTRINGRESULT[7];
	};
	RETURN _FLOAT32TOSTRINGRESULT[6];
 };
 IF(I >=3){
	IF(I >=4){
 IF(I >=5){
		RETURN _FLOAT32TOSTRINGRESULT[5];
 };
 RETURN _FLOAT32TOSTRINGRESULT[4];
	};
	RETURN _FLOAT32TOSTRINGRESULT[3];
 };
 IF(I >=1){
	IF(I >=2){
 RETURN _FLOAT32TOSTRINGRESULT[2];
	};
	RETURN _FLOAT32TOSTRINGRESULT[1];
 };
 RETURN _FLOAT32TOSTRINGRESULT[0];
};

//
//Sets Packed BCD value 'a' by array index 'i'.
//
FUNC VOID _FLOAT32TOSTRINGSETBCD(VAR INT I,VAR INT A)
{
 /** /// Unit testing
  if (!PackedBcdValidate( a )) {
    PrintDebug( ConcatStrings( "Float32ToString: SetBCD invalid a = ", IntToString( a ) ) );
  };
  if ((i < 0) || (i > 11)) {
    PrintDebug( ConcatStrings( "Float32ToString: SetBCD invalid i = ", IntToString( i ) ) );
    return;
  };
  /**/
 IF(I >=6){
	IF(I >=9){
 IF(I >=10){
		IF(I >=11){
 _FLOAT32TOSTRINGRESULT[11]=A;
 RETURN;
		};
		_FLOAT32TOSTRINGRESULT[10]=A;
		RETURN;
 };
 _FLOAT32TOSTRINGRESULT[9]=A;
 RETURN;
	};
	IF(I >=7){
 IF(I >=8){
		_FLOAT32TOSTRINGRESULT[8]=A;
		RETURN;
 };
 _FLOAT32TOSTRINGRESULT[7]=A;
 RETURN;
	};
	_FLOAT32TOSTRINGRESULT[6]=A;
	RETURN;
 };
 IF(I >=3){
	IF(I >=4){
 IF(I >=5){
		_FLOAT32TOSTRINGRESULT[5]=A;
		RETURN;
 };
 _FLOAT32TOSTRINGRESULT[4]=A;
 RETURN;
	};
	_FLOAT32TOSTRINGRESULT[3]=A;
	RETURN;
 };
 IF(I >=1){
	IF(I >=2){
 _FLOAT32TOSTRINGRESULT[2]=A;
 RETURN;
	};
	_FLOAT32TOSTRINGRESULT[1]=A;
	RETURN;
 };
 _FLOAT32TOSTRINGRESULT[0]=A;
};

//
//Initializes Packed BCD array with 0 from index 'i' to 'j'.
//
FUNC VOID _FLOAT32TOSTRINGCLRBCD(VAR INT I,VAR INT J)
{
 /** /// Unit testing
  if ((i < 0) || (i > 11)) {
    PrintDebug( ConcatStrings( "Float32ToString: ClrBCD invalid i = ", IntToString( i ) ) );
    return;
  };
  /**/
 _FLOAT32TOSTRINGSETBCD(I,0);
 IF(I < J){
 _FLOAT32TOSTRINGCLRBCD(I + 1,J);
 };
};

//
//Adds a single Packed BCD 'a' by index 'i' to the _Float32ToStringResult.
//
FUNC VOID _FLOAT32TOSTRINGADDBCD(VAR INT I,VAR INT A)
{
 _FLOAT32TOSTRINGSETBCD(I,PACKEDBCDADDITION(_FLOAT32TOSTRINGGETBCD(I),A));
 IF(PACKEDBCDCARRYBIT){
	/** /// Unit testing
    if (!i) {
      PrintDebug( "Float32ToString: AddBCD result overflow" );
      return;
    };
    /**/
	_FLOAT32TOSTRINGADDBCD(I - 1,1);
 };
};

//
//Adds the Packed BCD values of a significand bit by exponent 'e' (2**e).
//Note: The function (unwound binary search and BCD values) was generated
//with a program that I developed by myself (to avoid typing errors *g*).
//
FUNC VOID _FLOAT32TOSTRINGADDBIT(VAR INT E)
{
 /** /// Unit testing
  if ((e < -149) || (e > 128)) {
    PrintDebug( ConcatStrings( "Float32ToString: AddBit invalid e = ", IntToString( e ) ) );
    return;
  };
  /**/
 IF(E >=-10){
	IF(E >=59){
 IF(E >=94){
		IF(E >=111){
 IF(E >=120){
			IF(E >=124){
 IF(E >=126){
				IF(E >=127){
 IF(E >=128){
					_FLOAT32TOSTRINGADDBCD(1,1728053248);//[ 1] 0x67000000
					_FLOAT32TOSTRINGADDBCD(0,54536227);//[ 0] 0x03402823
					RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(1,-2097152000);//[ 1] 0x83000000
 _FLOAT32TOSTRINGADDBCD(0,24122385);//[ 0] 0x01701411
 RETURN;
				};
				_FLOAT32TOSTRINGADDBCD(1,-1854930944);	//[ 1] 0x91700000
				_FLOAT32TOSTRINGADDBCD(0,8718085);	//[ 0] 0x00850705
				RETURN;
 };
 IF(E >=125){
				_FLOAT32TOSTRINGADDBCD(1,-1785724928);	//[ 1] 0x95900000
				_FLOAT32TOSTRINGADDBCD(0,4346706);	//[ 0] 0x00425352
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(1,1200619520);//[ 1] 0x47900000
 _FLOAT32TOSTRINGADDBCD(0,2172534);//[ 0] 0x00212676
 RETURN;
			};
			IF(E >=122){
 IF(E >=123){
				_FLOAT32TOSTRINGADDBCD(1,603979776);//[ 1] 0x24000000
				_FLOAT32TOSTRINGADDBCD(0,1073976);	//[ 0] 0x00106338
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(1,295174144);	//[ 1] 0x11980000
 _FLOAT32TOSTRINGADDBCD(0,340329);//[ 0] 0x00053169
 RETURN;
			};
			IF(E >=121){
 _FLOAT32TOSTRINGADDBCD(1,1436090368);//[ 1] 0x55990000
 _FLOAT32TOSTRINGADDBCD(0,157060);//[ 0] 0x00026584
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(1,671088640);//[ 1] 0x28000000
			_FLOAT32TOSTRINGADDBCD(0,78482);//[ 0] 0x00013292
			RETURN;
 };
 IF(E >=115){
			IF(E >=117){
 IF(E >=118){
				IF(E >=119){
 _FLOAT32TOSTRINGADDBCD(1,328826880);	//[ 1] 0x13998000
 _FLOAT32TOSTRINGADDBCD(0,26182);	//[ 0] 0x00006646
 RETURN;
				};
				_FLOAT32TOSTRINGADDBCD(1,110727168);//[ 1] 0x06999000
				_FLOAT32TOSTRINGADDBCD(0,13091);//[ 0] 0x00003323
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(1,1397329920);//[ 1] 0x53499000
 _FLOAT32TOSTRINGADDBCD(0,5729);//[ 0] 0x00001661
 RETURN;
			};
			IF(E >=116){
 _FLOAT32TOSTRINGADDBCD(1,1987352320);//[ 1] 0x76749700
 _FLOAT32TOSTRINGADDBCD(0,2096);//[ 0] 0x00000830
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(1,943147264);//[ 1] 0x38374900
			_FLOAT32TOSTRINGADDBCD(0,1045);//[ 0] 0x00000415
			RETURN;
 };
 IF(E >=113){
			IF(E >=114){
 _FLOAT32TOSTRINGADDBCD(1,1763210240);//[ 1] 0x69187400
 _FLOAT32TOSTRINGADDBCD(0,519);//[ 0] 0x00000207
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(1,-2074528000);	//[ 1] 0x84593700
			_FLOAT32TOSTRINGADDBCD(0,259);	//[ 0] 0x00000103
			RETURN;
 };
 IF(E >=112){
			_FLOAT32TOSTRINGADDBCD(1,-1842780064);	//[ 1] 0x92296860
			_FLOAT32TOSTRINGADDBCD(0,81);//[ 0] 0x00000051
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(1,-1777040336);//[ 1] 0x96148430
 _FLOAT32TOSTRINGADDBCD(0,37);//[ 0] 0x00000025
 RETURN;
		};
		IF(E >=102){
 IF(E >=106){
			IF(E >=108){
 IF(E >=109){
				IF(E >=110){
 _FLOAT32TOSTRINGADDBCD(1,-1744354800);//[ 1] 0x98074210
 _FLOAT32TOSTRINGADDBCD(0,18);//[ 0] 0x00000012
 RETURN;
				};
				_FLOAT32TOSTRINGADDBCD(1,1224962311);//[ 1] 0x49037107
				_FLOAT32TOSTRINGADDBCD(0,6);//[ 0] 0x00000006
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(1,609322324);	//[ 1] 0x24518554
 _FLOAT32TOSTRINGADDBCD(0,3);	//[ 0] 0x00000003
 RETURN;
			};
			IF(E >=107){
 _FLOAT32TOSTRINGADDBCD(1,1646629495);//[ 1] 0x62259277
 _FLOAT32TOSTRINGADDBCD(0,1);	//[ 0] 0x00000001
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(2,1073741824);//[ 2] 0x40000000
			_FLOAT32TOSTRINGADDBCD(1,-2129488328);	//[ 1] 0x81129638
			RETURN;
 };
 IF(E >=104){
			IF(E >=105){
 _FLOAT32TOSTRINGADDBCD(2,536870912);	//[ 2] 0x20000000
 _FLOAT32TOSTRINGADDBCD(1,1079396377);//[ 1] 0x40564819
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(2,1610612736);//[ 2] 0x60000000
			_FLOAT32TOSTRINGADDBCD(1,539501577);//[ 1] 0x20282409
			RETURN;
 };
 IF(E >=103){
			_FLOAT32TOSTRINGADDBCD(2,-2147483648);	//[ 2] 0x80000000
			_FLOAT32TOSTRINGADDBCD(1,269750788);//[ 1] 0x10141204
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(2,1073741824);//[ 2] 0x40000000
 _FLOAT32TOSTRINGADDBCD(1,84346370);//[ 1] 0x05070602
 RETURN;
		};
		IF(E >=98){
 IF(E >=100){
			IF(E >=101){
 _FLOAT32TOSTRINGADDBCD(2,536870912);	//[ 2] 0x20000000
 _FLOAT32TOSTRINGADDBCD(1,39015169);//[ 1] 0x02535301
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(2,1610612736);//[ 2] 0x60000000
			_FLOAT32TOSTRINGADDBCD(1,19297872);//[ 1] 0x01267650
			RETURN;
 };
 IF(E >=99){
			_FLOAT32TOSTRINGADDBCD(2,805306368);//[ 2] 0x30000000
			_FLOAT32TOSTRINGADDBCD(1,6502437);	//[ 1] 0x00633825
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(2,1694498816);//[ 2] 0x65000000
 _FLOAT32TOSTRINGADDBCD(1,3238162);//[ 1] 0x00316912
 RETURN;
		};
		IF(E >=96){
 IF(E >=97){
			_FLOAT32TOSTRINGADDBCD(2,844103680);//[ 2] 0x32500000
			_FLOAT32TOSTRINGADDBCD(1,1410134);	//[ 1] 0x00158456
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(2,371523584);	//[ 2] 0x16250000
 _FLOAT32TOSTRINGADDBCD(1,496168);//[ 1] 0x00079228
 RETURN;
		};
		IF(E >=95){
 _FLOAT32TOSTRINGADDBCD(2,135462912);	//[ 2] 0x08130000
 _FLOAT32TOSTRINGADDBCD(1,235028);//[ 1] 0x00039614
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(2,67502080);//[ 2] 0x04060000
		_FLOAT32TOSTRINGADDBCD(1,104455);//[ 1] 0x00019807
		RETURN;
 };
 IF(E >=76){
		IF(E >=85){
 IF(E >=89){
			IF(E >=91){
 IF(E >=92){
				IF(E >=93){
 _FLOAT32TOSTRINGADDBCD(2,1375932416);//[ 2] 0x52031000
 _FLOAT32TOSTRINGADDBCD(1,39171);	//[ 1] 0x00009903
 RETURN;
				};
				_FLOAT32TOSTRINGADDBCD(2,1979801600);//[ 2] 0x76016000
				_FLOAT32TOSTRINGADDBCD(1,18769);//[ 1] 0x00004951
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(2,-2013233152);//[ 2] 0x88008000
 _FLOAT32TOSTRINGADDBCD(1,9333);//[ 1] 0x00002475
 RETURN;
			};
			IF(E >=90){
 _FLOAT32TOSTRINGADDBCD(2,-1811922944);//[ 2] 0x94004000
 _FLOAT32TOSTRINGADDBCD(1,4663);//[ 1] 0x00001237
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(2,-1761599488);	//[ 2] 0x97002000
			_FLOAT32TOSTRINGADDBCD(1,1560);//[ 1] 0x00000618
			RETURN;
 };
 IF(E >=87){
			IF(E >=88){
 _FLOAT32TOSTRINGADDBCD(2,1213206528);//[ 2] 0x48501000
 _FLOAT32TOSTRINGADDBCD(1,777);//[ 1] 0x00000309
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(2,1948583168);//[ 2] 0x74250500
			_FLOAT32TOSTRINGADDBCD(1,340);	//[ 1] 0x00000154
			RETURN;
 };
 IF(E >=86){
			_FLOAT32TOSTRINGADDBCD(2,923947600);//[ 2] 0x37125250
			_FLOAT32TOSTRINGADDBCD(1,119);	//[ 1] 0x00000077
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(2,1750476320);//[ 2] 0x68562620
 _FLOAT32TOSTRINGADDBCD(1,56);//[ 1] 0x00000038
 RETURN;
		};
		IF(E >=80){
 IF(E >=82){
			IF(E >=83){
 IF(E >=84){
				_FLOAT32TOSTRINGADDBCD(2,875041552);//[ 2] 0x34281310
				_FLOAT32TOSTRINGADDBCD(1,25);//[ 1] 0x00000019
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(2,1729365590);//[ 2] 0x67140656
 _FLOAT32TOSTRINGADDBCD(1,9);	//[ 1] 0x00000009
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(2,-2091449560);	//[ 2] 0x83570328
			_FLOAT32TOSTRINGADDBCD(1,4);//[ 1] 0x00000004
			RETURN;
 };
 IF(E >=81){
			_FLOAT32TOSTRINGADDBCD(2,1098404196);//[ 2] 0x41785164
			_FLOAT32TOSTRINGADDBCD(1,2);//[ 1] 0x00000002
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(2,545858946);	//[ 2] 0x20892582
 _FLOAT32TOSTRINGADDBCD(1,1);	//[ 1] 0x00000001
 RETURN;
		};
		IF(E >=78){
 IF(E >=79){
			_FLOAT32TOSTRINGADDBCD(2,1615094417);//[ 2] 0x60446291
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(3,1342177280);//[ 3] 0x50000000
 _FLOAT32TOSTRINGADDBCD(2,807547205);	//[ 2] 0x30223145
 RETURN;
		};
		IF(E >=77){
 _FLOAT32TOSTRINGADDBCD(3,1879048192);//[ 3] 0x70000000
 _FLOAT32TOSTRINGADDBCD(2,353441138);	//[ 2] 0x15111572
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(3,922746880);//[ 3] 0x37000000
		_FLOAT32TOSTRINGADDBCD(2,123033478);//[ 2] 0x07555786
		RETURN;
 };
 IF(E >=67){
		IF(E >=71){
 IF(E >=73){
			IF(E >=74){
 IF(E >=75){
				_FLOAT32TOSTRINGADDBCD(3,419430400);//[ 3] 0x19000000
				_FLOAT32TOSTRINGADDBCD(2,58161299);//[ 2] 0x03777893
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(3,1493172224);//[ 3] 0x59000000
 _FLOAT32TOSTRINGADDBCD(2,25725254);//[ 2] 0x01888946
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(3,695205888);//[ 3] 0x29700000
			_FLOAT32TOSTRINGADDBCD(2,9716851);	//[ 2] 0x00944473
			RETURN;
 };
 IF(E >=72){
			_FLOAT32TOSTRINGADDBCD(3,1686110208);//[ 3] 0x64800000
			_FLOAT32TOSTRINGADDBCD(2,4661814);	//[ 2] 0x00472236
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(3,843055104);	//[ 3] 0x32400000
 _FLOAT32TOSTRINGADDBCD(2,2318616);//[ 2] 0x00236118
 RETURN;
		};
		IF(E >=69){
 IF(E >=70){
			_FLOAT32TOSTRINGADDBCD(3,371195904);//[ 3] 0x16200000
			_FLOAT32TOSTRINGADDBCD(2,1146969);	//[ 2] 0x00118059
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(3,1477443584);//[ 3] 0x58100000
 _FLOAT32TOSTRINGADDBCD(2,364585);//[ 2] 0x00059029
 RETURN;
		};
		IF(E >=68){
 _FLOAT32TOSTRINGADDBCD(3,2030370816);//[ 3] 0x79050000
 _FLOAT32TOSTRINGADDBCD(2,169236);//[ 2] 0x00029514
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(3,961740800);//[ 3] 0x39530000
		_FLOAT32TOSTRINGADDBCD(2,83799);//[ 2] 0x00014757
		RETURN;
 };
 IF(E >=63){
		IF(E >=65){
 IF(E >=66){
			_FLOAT32TOSTRINGADDBCD(3,1769353216);//[ 3] 0x69763000
			_FLOAT32TOSTRINGADDBCD(2,29560);//[ 2] 0x00007378
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(3,881332224);	//[ 3] 0x34881000
 _FLOAT32TOSTRINGADDBCD(2,13961);	//[ 2] 0x00003689
 RETURN;
		};
		IF(E >=64){
 _FLOAT32TOSTRINGADDBCD(3,1732513792);//[ 3] 0x67441000
 _FLOAT32TOSTRINGADDBCD(2,6212);//[ 2] 0x00001844
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(3,863110144);//[ 3] 0x33720400
		_FLOAT32TOSTRINGADDBCD(2,2338);//[ 2] 0x00000922
		RETURN;
 };
 IF(E >=61){
		IF(E >=62){
 _FLOAT32TOSTRINGADDBCD(3,377881088);	//[ 3] 0x16860200
 _FLOAT32TOSTRINGADDBCD(2,1121);//[ 2] 0x00000461
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(3,1480786176);//[ 3] 0x58430100
		_FLOAT32TOSTRINGADDBCD(2,560);	//[ 2] 0x00000230
		RETURN;
 };
 IF(E >=60){
		_FLOAT32TOSTRINGADDBCD(3,690049024);//[ 3] 0x29215000
		_FLOAT32TOSTRINGADDBCD(2,277);	//[ 2] 0x00000115
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(3,1684043040);//[ 3] 0x64607520
 _FLOAT32TOSTRINGADDBCD(2,87);//[ 2] 0x00000057
 RETURN;
	};
	IF(E >=24){
 IF(E >=41){
		IF(E >=50){
 IF(E >=54){
			IF(E >=56){
 IF(E >=57){
				IF(E >=58){
 _FLOAT32TOSTRINGADDBCD(3,-2110769312);//[ 3] 0x82303760
 _FLOAT32TOSTRINGADDBCD(2,40);//[ 2] 0x00000028
 RETURN;
				};
				_FLOAT32TOSTRINGADDBCD(3,1091901568);//[ 3] 0x41151880
				_FLOAT32TOSTRINGADDBCD(2,20);//[ 2] 0x00000014
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(3,542595392);	//[ 3] 0x20575940
 _FLOAT32TOSTRINGADDBCD(2,7);	//[ 2] 0x00000007
 RETURN;
			};
			IF(E >=55){
 _FLOAT32TOSTRINGADDBCD(3,1613265264);//[ 3] 0x60287970
 _FLOAT32TOSTRINGADDBCD(2,3);	//[ 2] 0x00000003
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(3,-2146158203);	//[ 3] 0x80143985
			_FLOAT32TOSTRINGADDBCD(2,1);//[ 2] 0x00000001
			RETURN;
 };
 IF(E >=52){
			IF(E >=53){
 _FLOAT32TOSTRINGADDBCD(4,1342177280);//[ 4] 0x50000000
 _FLOAT32TOSTRINGADDBCD(3,-1878582894);//[ 3] 0x90071992
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(4,805306368);//[ 4] 0x30000000
			_FLOAT32TOSTRINGADDBCD(3,1157847446);//[ 3] 0x45035996
			RETURN;
 };
 IF(E >=51){
			_FLOAT32TOSTRINGADDBCD(4,268435456);//[ 4] 0x10000000
			_FLOAT32TOSTRINGADDBCD(3,575764888);//[ 3] 0x22517998
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,268435456);	//[ 4] 0x10000000
 _FLOAT32TOSTRINGADDBCD(3,287672729);	//[ 3] 0x11258999
 RETURN;
		};
		IF(E >=45){
 IF(E >=47){
			IF(E >=48){
 IF(E >=49){
				_FLOAT32TOSTRINGADDBCD(4,1392508928);//[ 4] 0x53000000
				_FLOAT32TOSTRINGADDBCD(3,90346649);//[ 3] 0x05629499
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,1996488704);//[ 4] 0x77000000
 _FLOAT32TOSTRINGADDBCD(3,42026825);//[ 3] 0x02814749
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(4,-2013265920);	//[ 4] 0x88000000
			_FLOAT32TOSTRINGADDBCD(3,21001076);//[ 3] 0x01407374
			RETURN;
 };
 IF(E >=46){
			_FLOAT32TOSTRINGADDBCD(4,1142947840);//[ 4] 0x44200000
			_FLOAT32TOSTRINGADDBCD(3,7353991);	//[ 3] 0x00703687
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,1913651200);//[ 4] 0x72100000
 _FLOAT32TOSTRINGADDBCD(3,3479619);//[ 3] 0x00351843
 RETURN;
		};
		IF(E >=43){
 IF(E >=44){
			_FLOAT32TOSTRINGADDBCD(4,-2046820352);	//[ 4] 0x86000000
			_FLOAT32TOSTRINGADDBCD(3,1530145);	//[ 3] 0x00175921
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,-1828585472);//[ 4] 0x93020000
 _FLOAT32TOSTRINGADDBCD(3,555360);//[ 3] 0x00087960
 RETURN;
		};
		IF(E >=42){
 _FLOAT32TOSTRINGADDBCD(4,1179713536);//[ 4] 0x46510000
 _FLOAT32TOSTRINGADDBCD(3,276864);//[ 3] 0x00043980
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,589692928);//[ 4] 0x23260000
		_FLOAT32TOSTRINGADDBCD(3,137616);//[ 3] 0x00021990
		RETURN;
 };
 IF(E >=32){
		IF(E >=36){
 IF(E >=38){
			IF(E >=39){
 IF(E >=40){
				_FLOAT32TOSTRINGADDBCD(4,291700736);//[ 4] 0x11630000
				_FLOAT32TOSTRINGADDBCD(3,67989);//[ 3] 0x00010995
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,1434533888);//[ 4] 0x55814000
 _FLOAT32TOSTRINGADDBCD(3,21655);	//[ 3] 0x00005497
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(4,2005954560);//[ 4] 0x77907000
			_FLOAT32TOSTRINGADDBCD(3,10056);//[ 3] 0x00002748
			RETURN;
 };
 IF(E >=37){
			_FLOAT32TOSTRINGADDBCD(4,949301248);//[ 4] 0x38953000
			_FLOAT32TOSTRINGADDBCD(3,4980);//[ 3] 0x00001374
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,424109824);	//[ 4] 0x19476700
 _FLOAT32TOSTRINGADDBCD(3,1671);//[ 3] 0x00000687
 RETURN;
		};
		IF(E >=34){
 IF(E >=35){
			_FLOAT32TOSTRINGADDBCD(4,1500742656);//[ 4] 0x59738400
			_FLOAT32TOSTRINGADDBCD(3,835);	//[ 3] 0x00000343
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,2038862336);//[ 4] 0x79869200
 _FLOAT32TOSTRINGADDBCD(3,369);//[ 3] 0x00000171
 RETURN;
		};
		IF(E >=33){
 _FLOAT32TOSTRINGADDBCD(4,-1986837104);//[ 4] 0x89934590
 _FLOAT32TOSTRINGADDBCD(3,133);//[ 3] 0x00000085
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,-1802079488);	//[ 4] 0x94967300
		_FLOAT32TOSTRINGADDBCD(3,66);//[ 3] 0x00000042
		RETURN;
 };
 IF(E >=28){
		IF(E >=30){
 IF(E >=31){
			_FLOAT32TOSTRINGADDBCD(4,1195914832);//[ 4] 0x47483650
			_FLOAT32TOSTRINGADDBCD(3,33);//[ 3] 0x00000021
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,1936988192);//[ 4] 0x73741820
 _FLOAT32TOSTRINGADDBCD(3,16);//[ 3] 0x00000010
 RETURN;
		};
		IF(E >=29){
 _FLOAT32TOSTRINGADDBCD(4,914819346);	//[ 4] 0x36870912
 _FLOAT32TOSTRINGADDBCD(3,5);	//[ 3] 0x00000005
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,1749242966);//[ 4] 0x68435456
		_FLOAT32TOSTRINGADDBCD(3,2);//[ 3] 0x00000002
		RETURN;
 };
 IF(E >=26){
		IF(E >=27){
 _FLOAT32TOSTRINGADDBCD(4,874608424);	//[ 4] 0x34217728
 _FLOAT32TOSTRINGADDBCD(3,1);	//[ 3] 0x00000001
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,1729136740);//[ 4] 0x67108864
		RETURN;
 };
 IF(E >=25){
		_FLOAT32TOSTRINGADDBCD(4,861226034);//[ 4] 0x33554432
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,376926742);	//[ 4] 0x16777216
 RETURN;
	};
	IF(E >=7){
 IF(E >=15){
		IF(E >=19){
 IF(E >=21){
			IF(E >=22){
 IF(E >=23){
				_FLOAT32TOSTRINGADDBCD(4,137922056);//[ 4] 0x08388608
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,68764420);//[ 4] 0x04194304
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(4,34173266);//[ 4] 0x02097152
			RETURN;
 };
 IF(E >=20){
			_FLOAT32TOSTRINGADDBCD(4,17073526);//[ 4] 0x01048576
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,5390984);//[ 4] 0x00524288
 RETURN;
		};
		IF(E >=17){
 IF(E >=18){
			_FLOAT32TOSTRINGADDBCD(4,2498884);	//[ 4] 0x00262144
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,1249394);//[ 4] 0x00131072
 RETURN;
		};
		IF(E >=16){
 _FLOAT32TOSTRINGADDBCD(4,415030);//[ 4] 0x00065536
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,206696);//[ 4] 0x00032768
		RETURN;
 };
 IF(E >=11){
		IF(E >=13){
 IF(E >=14){
			_FLOAT32TOSTRINGADDBCD(4,91012);//[ 4] 0x00016384
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,33170);	//[ 4] 0x00008192
 RETURN;
		};
		IF(E >=12){
 _FLOAT32TOSTRINGADDBCD(4,16534);	//[ 4] 0x00004096
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,8264);//[ 4] 0x00002048
		RETURN;
 };
 IF(E >=9){
		IF(E >=10){
 _FLOAT32TOSTRINGADDBCD(4,4132);//[ 4] 0x00001024
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,1298);//[ 4] 0x00000512
		RETURN;
 };
 IF(E >=8){
		_FLOAT32TOSTRINGADDBCD(4,598);	//[ 4] 0x00000256
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,296);//[ 4] 0x00000128
 RETURN;
	};
	IF(E >=-2){
 IF(E >=2){
		IF(E >=4){
 IF(E >=5){
			IF(E >=6){
 _FLOAT32TOSTRINGADDBCD(4,100);//[ 4] 0x00000064
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(4,50);//[ 4] 0x00000032
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(4,22);//[ 4] 0x00000016
 RETURN;
		};
		IF(E >=3){
 _FLOAT32TOSTRINGADDBCD(4,8);	//[ 4] 0x00000008
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,4);//[ 4] 0x00000004
		RETURN;
 };
 IF(E >=0){
		IF(E >=1){
 _FLOAT32TOSTRINGADDBCD(4,2);	//[ 4] 0x00000002
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(4,1);//[ 4] 0x00000001
		RETURN;
 };
 IF(E >=-1){
		_FLOAT32TOSTRINGADDBCD(5,1342177280);//[ 5] 0x50000000
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(5,620756992);	//[ 5] 0x25000000
 RETURN;
	};
	IF(E >=-6){
 IF(E >=-4){
		IF(E >=-3){
 _FLOAT32TOSTRINGADDBCD(5,307232768);	//[ 5] 0x12500000
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(5,103088128);//[ 5] 0x06250000
		RETURN;
 };
 IF(E >=-5){
		_FLOAT32TOSTRINGADDBCD(5,51531776);//[ 5] 0x03125000
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(5,22422784);//[ 5] 0x01562500
 RETURN;
	};
	IF(E >=-8){
 IF(E >=-7){
		_FLOAT32TOSTRINGADDBCD(5,7869008);	//[ 5] 0x00781250
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(5,3737125);//[ 5] 0x00390625
 RETURN;
	};
	IF(E >=-9){
 _FLOAT32TOSTRINGADDBCD(6,1342177280);//[ 6] 0x50000000
 _FLOAT32TOSTRINGADDBCD(5,1659666);//[ 5] 0x00195312
 RETURN;
	};
	_FLOAT32TOSTRINGADDBCD(6,620756992);//[ 6] 0x25000000
	_FLOAT32TOSTRINGADDBCD(5,620118);//[ 5] 0x00097656
	RETURN;
 };
 IF(E >=-80){
	IF(E >=-45){
 IF(E >=-28){
		IF(E >=-19){
 IF(E >=-15){
			IF(E >=-13){
 IF(E >=-12){
				IF(E >=-11){
 _FLOAT32TOSTRINGADDBCD(6,307232768);	//[ 6] 0x12500000
 _FLOAT32TOSTRINGADDBCD(5,297000);//[ 5] 0x00048828
 RETURN;
				};
				_FLOAT32TOSTRINGADDBCD(6,103088128);//[ 6] 0x06250000
				_FLOAT32TOSTRINGADDBCD(5,148500);//[ 5] 0x00024414
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(6,51576832);//[ 6] 0x03130000
 _FLOAT32TOSTRINGADDBCD(5,74247);	//[ 5] 0x00012207
 RETURN;
			};
			IF(E >=-14){
 _FLOAT32TOSTRINGADDBCD(6,1364602880);//[ 6] 0x51563000
 _FLOAT32TOSTRINGADDBCD(5,24835);	//[ 5] 0x00006103
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(6,1970802688);//[ 6] 0x75781000
			_FLOAT32TOSTRINGADDBCD(5,12369);//[ 5] 0x00003051
			RETURN;
 };
 IF(E >=-17){
			IF(E >=-16){
 _FLOAT32TOSTRINGADDBCD(6,-2021060608);//[ 6] 0x87891000
 _FLOAT32TOSTRINGADDBCD(5,5413);//[ 5] 0x00001525
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(6,-1818995968);	//[ 6] 0x93945300
			_FLOAT32TOSTRINGADDBCD(5,1890);//[ 5] 0x00000762
			RETURN;
 };
 IF(E >=-18){
			_FLOAT32TOSTRINGADDBCD(6,1184311040);//[ 6] 0x46972700
			_FLOAT32TOSTRINGADDBCD(5,897);	//[ 5] 0x00000381
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(6,1934123776);//[ 6] 0x73486300
 _FLOAT32TOSTRINGADDBCD(5,400);//[ 5] 0x00000190
 RETURN;
		};
		IF(E >=-24){
 IF(E >=-22){
			IF(E >=-21){
 IF(E >=-20){
				_FLOAT32TOSTRINGADDBCD(6,913584480);//[ 6] 0x36743160
				_FLOAT32TOSTRINGADDBCD(5,149);	//[ 5] 0x00000095
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(6,1748440448);//[ 6] 0x68371580
 _FLOAT32TOSTRINGADDBCD(5,71);//[ 5] 0x00000047
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(6,-2078779504);	//[ 6] 0x84185790
			_FLOAT32TOSTRINGADDBCD(5,35);//[ 5] 0x00000023
			RETURN;
 };
 IF(E >=-23){
			_FLOAT32TOSTRINGADDBCD(6,-1844893440);	//[ 6] 0x92092900
			_FLOAT32TOSTRINGADDBCD(5,17);//[ 5] 0x00000011
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(6,-1778097080);//[ 6] 0x96046448
 _FLOAT32TOSTRINGADDBCD(5,5);	//[ 5] 0x00000005
 RETURN;
		};
		IF(E >=-26){
 IF(E >=-25){
			_FLOAT32TOSTRINGADDBCD(6,-1744686556);	//[ 6] 0x98023224
			_FLOAT32TOSTRINGADDBCD(5,2);//[ 5] 0x00000002
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(6,1224807954);//[ 6] 0x49011612
 _FLOAT32TOSTRINGADDBCD(5,1);	//[ 5] 0x00000001
 RETURN;
		};
		IF(E >=-27){
 _FLOAT32TOSTRINGADDBCD(6,1951422470);//[ 6] 0x74505806
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(6,925182211);//[ 6] 0x37252903
		RETURN;
 };
 IF(E >=-37){
		IF(E >=-33){
 IF(E >=-31){
			IF(E >=-30){
 IF(E >=-29){
				_FLOAT32TOSTRINGADDBCD(7,1342177280);//[ 7] 0x50000000
				_FLOAT32TOSTRINGADDBCD(6,409101393);//[ 6] 0x18626451
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,1962934272);//[ 7] 0x75000000
 _FLOAT32TOSTRINGADDBCD(6,154219045);	//[ 6] 0x09313225
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(7,-2030043136);	//[ 7] 0x87000000
			_FLOAT32TOSTRINGADDBCD(6,73754130);//[ 6] 0x04656612
			RETURN;
 };
 IF(E >=-32){
			_FLOAT32TOSTRINGADDBCD(7,1140850688);//[ 7] 0x44000000
			_FLOAT32TOSTRINGADDBCD(6,36864774);//[ 6] 0x02328306
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,570425344);	//[ 7] 0x22000000
 _FLOAT32TOSTRINGADDBCD(6,18235731);//[ 6] 0x01164153
 RETURN;
		};
		IF(E >=-35){
 IF(E >=-34){
			_FLOAT32TOSTRINGADDBCD(7,1620049920);//[ 7] 0x60900000
			_FLOAT32TOSTRINGADDBCD(6,5775478);	//[ 6] 0x00582076
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,810549248);	//[ 7] 0x30500000
 _FLOAT32TOSTRINGADDBCD(6,2691128);//[ 6] 0x00291038
 RETURN;
		};
		IF(E >=-36){
 _FLOAT32TOSTRINGADDBCD(7,354418688);	//[ 7] 0x15200000
 _FLOAT32TOSTRINGADDBCD(6,1332505);//[ 6] 0x00145519
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(7,1465974784);//[ 7] 0x57610000
		_FLOAT32TOSTRINGADDBCD(6,468825);//[ 6] 0x00072759
		RETURN;
 };
 IF(E >=-41){
		IF(E >=-39){
 IF(E >=-38){
			_FLOAT32TOSTRINGADDBCD(7,2021720064);//[ 7] 0x78810000
			_FLOAT32TOSTRINGADDBCD(6,222073);//[ 6] 0x00036379
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,-1992294400);//[ 7] 0x89400000
 _FLOAT32TOSTRINGADDBCD(6,98697);	//[ 6] 0x00018189
 RETURN;
		};
		IF(E >=-40){
 _FLOAT32TOSTRINGADDBCD(7,-1804591104);//[ 7] 0x94702000
 _FLOAT32TOSTRINGADDBCD(6,37012);	//[ 6] 0x00009094
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(7,1194659840);//[ 7] 0x47351000
		_FLOAT32TOSTRINGADDBCD(6,17735);//[ 6] 0x00004547
		RETURN;
 };
 IF(E >=-43){
		IF(E >=-42){
 _FLOAT32TOSTRINGADDBCD(7,1936150528);//[ 7] 0x73675000
 _FLOAT32TOSTRINGADDBCD(6,8819);//[ 6] 0x00002273
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(7,-2038202368);	//[ 7] 0x86838000
		_FLOAT32TOSTRINGADDBCD(6,4406);//[ 6] 0x00001136
		RETURN;
 };
 IF(E >=-44){
		_FLOAT32TOSTRINGADDBCD(7,1128368384);//[ 7] 0x43418900
		_FLOAT32TOSTRINGADDBCD(6,1384);//[ 6] 0x00000568
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,561026048);	//[ 7] 0x21709400
 _FLOAT32TOSTRINGADDBCD(6,644);//[ 6] 0x00000284
 RETURN;
	};
	IF(E >=-63){
 IF(E >=-54){
		IF(E >=-50){
 IF(E >=-48){
			IF(E >=-47){
 IF(E >=-46){
				_FLOAT32TOSTRINGADDBCD(7,277169920);//[ 7] 0x10854700
				_FLOAT32TOSTRINGADDBCD(6,322);	//[ 6] 0x00000142
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,88240992);//[ 7] 0x05427360
 _FLOAT32TOSTRINGADDBCD(6,113);//[ 6] 0x00000071
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(7,1383151232);//[ 7] 0x52713680
			_FLOAT32TOSTRINGADDBCD(6,53);//[ 6] 0x00000035
			RETURN;
 };
 IF(E >=-49){
			_FLOAT32TOSTRINGADDBCD(7,1983211584);//[ 7] 0x76356840
			_FLOAT32TOSTRINGADDBCD(6,23);//[ 6] 0x00000017
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,-2011724768);//[ 7] 0x88178420
 _FLOAT32TOSTRINGADDBCD(6,8);	//[ 6] 0x00000008
 RETURN;
		};
		IF(E >=-52){
 IF(E >=-51){
			_FLOAT32TOSTRINGADDBCD(7,1141412368);//[ 7] 0x44089210
			_FLOAT32TOSTRINGADDBCD(6,4);//[ 6] 0x00000004
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(7,570705413);	//[ 7] 0x22044605
 _FLOAT32TOSTRINGADDBCD(6,2);	//[ 6] 0x00000002
 RETURN;
		};
		IF(E >=-53){
 _FLOAT32TOSTRINGADDBCD(7,285352706);	//[ 7] 0x11022302
 _FLOAT32TOSTRINGADDBCD(6,1);	//[ 6] 0x00000001
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(8,536870912);//[ 8] 0x20000000
		_FLOAT32TOSTRINGADDBCD(7,1431376209);//[ 7] 0x55511151
		RETURN;
 };
 IF(E >=-59){
		IF(E >=-57){
 IF(E >=-56){
			IF(E >=-55){
 _FLOAT32TOSTRINGADDBCD(8,1610612736);//[ 8] 0x60000000
 _FLOAT32TOSTRINGADDBCD(7,662001013);	//[ 7] 0x27755575
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(8,-2147483648);	//[ 8] 0x80000000
			_FLOAT32TOSTRINGADDBCD(7,327645063);//[ 7] 0x13877787
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(8,-1879048192);//[ 8] 0x90000000
 _FLOAT32TOSTRINGADDBCD(7,110332051);	//[ 7] 0x06938893
 RETURN;
		};
		IF(E >=-58){
 _FLOAT32TOSTRINGADDBCD(8,-1795162112);//[ 8] 0x95000000
 _FLOAT32TOSTRINGADDBCD(7,54957126);//[ 7] 0x03469446
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(8,1207959552);//[ 8] 0x48000000
		_FLOAT32TOSTRINGADDBCD(7,24332067);//[ 7] 0x01734723
		RETURN;
 };
 IF(E >=-61){
		IF(E >=-60){
 _FLOAT32TOSTRINGADDBCD(8,1937768448);//[ 8] 0x73800000
 _FLOAT32TOSTRINGADDBCD(7,8811361);//[ 7] 0x00867361
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(8,-2037383168);	//[ 8] 0x86900000
		_FLOAT32TOSTRINGADDBCD(7,4404864);	//[ 7] 0x00433680
		RETURN;
 };
 IF(E >=-62){
		_FLOAT32TOSTRINGADDBCD(8,1128267776);//[ 8] 0x43400000
		_FLOAT32TOSTRINGADDBCD(7,2189376);	//[ 7] 0x00216840
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(8,560988160);	//[ 8] 0x21700000
 _FLOAT32TOSTRINGADDBCD(7,1082400);//[ 7] 0x00108420
 RETURN;
	};
	IF(E >=-72){
 IF(E >=-68){
		IF(E >=-66){
 IF(E >=-65){
			IF(E >=-64){
 _FLOAT32TOSTRINGADDBCD(8,277217280);	//[ 8] 0x10860000
 _FLOAT32TOSTRINGADDBCD(7,344592);//[ 7] 0x00054210
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(8,88276992);//[ 8] 0x05430000
			_FLOAT32TOSTRINGADDBCD(7,160005);//[ 7] 0x00027105
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(8,1383202816);//[ 8] 0x52720000
 _FLOAT32TOSTRINGADDBCD(7,79186);	//[ 7] 0x00013552
 RETURN;
		};
		IF(E >=-67){
 _FLOAT32TOSTRINGADDBCD(8,641040384);	//[ 8] 0x26358000
 _FLOAT32TOSTRINGADDBCD(7,26486);	//[ 7] 0x00006776
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(8,320311296);//[ 8] 0x13179000
		_FLOAT32TOSTRINGADDBCD(7,13192);//[ 7] 0x00003388
		RETURN;
 };
 IF(E >=-70){
		IF(E >=-69){
 _FLOAT32TOSTRINGADDBCD(8,106467328);	//[ 8] 0x06589000
 _FLOAT32TOSTRINGADDBCD(7,5780);//[ 7] 0x00001694
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(8,53036800);//[ 8] 0x03294700
		_FLOAT32TOSTRINGADDBCD(7,2119);//[ 7] 0x00000847
		RETURN;
 };
 IF(E >=-71){
		_FLOAT32TOSTRINGADDBCD(8,1365537792);//[ 8] 0x51647400
		_FLOAT32TOSTRINGADDBCD(7,1059);//[ 7] 0x00000423
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(8,1971468032);//[ 8] 0x75823700
 _FLOAT32TOSTRINGADDBCD(7,529);//[ 7] 0x00000211
 RETURN;
	};
	IF(E >=-76){
 IF(E >=-74){
		IF(E >=-73){
 _FLOAT32TOSTRINGADDBCD(8,-2020534272);//[ 8] 0x87911800
 _FLOAT32TOSTRINGADDBCD(7,261);//[ 7] 0x00000105
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(8,-1818928864);	//[ 8] 0x93955920
		_FLOAT32TOSTRINGADDBCD(7,82);//[ 7] 0x00000052
		RETURN;
 };
 IF(E >=-75){
		_FLOAT32TOSTRINGADDBCD(8,1184332128);//[ 8] 0x46977960
		_FLOAT32TOSTRINGADDBCD(7,38);//[ 7] 0x00000026
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(8,591956352);	//[ 8] 0x23488980
 _FLOAT32TOSTRINGADDBCD(7,19);//[ 7] 0x00000013
 RETURN;
	};
	IF(E >=-78){
 IF(E >=-77){
		_FLOAT32TOSTRINGADDBCD(8,1635009680);//[ 8] 0x61744490
		_FLOAT32TOSTRINGADDBCD(7,6);//[ 7] 0x00000006
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(8,814162501);	//[ 8] 0x30872245
 _FLOAT32TOSTRINGADDBCD(7,3);	//[ 7] 0x00000003
 RETURN;
	};
	IF(E >=-79){
 _FLOAT32TOSTRINGADDBCD(8,1698914595);//[ 8] 0x65436123
 _FLOAT32TOSTRINGADDBCD(7,1);	//[ 7] 0x00000001
 RETURN;
	};
	_FLOAT32TOSTRINGADDBCD(9,805306368);//[ 9] 0x30000000
	_FLOAT32TOSTRINGADDBCD(8,-2106490783);	//[ 8] 0x82718061
	RETURN;
 };
 IF(E >=-115){
	IF(E >=-98){
 IF(E >=-89){
		IF(E >=-85){
 IF(E >=-83){
			IF(E >=-82){
 IF(E >=-81){
				_FLOAT32TOSTRINGADDBCD(9,1610612736);//[ 9] 0x60000000
				_FLOAT32TOSTRINGADDBCD(8,1094029360);//[ 8] 0x41359030
				RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(9,805306368);	//[ 9] 0x30000000
 _FLOAT32TOSTRINGADDBCD(8,543659285);	//[ 8] 0x20679515
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(9,1879048192);//[ 9] 0x70000000
			_FLOAT32TOSTRINGADDBCD(8,271816535);//[ 8] 0x10339757
			RETURN;
 };
 IF(E >=-84){
			_FLOAT32TOSTRINGADDBCD(9,-2097152000);	//[ 9] 0x83000000
			_FLOAT32TOSTRINGADDBCD(8,85366904);//[ 8] 0x05169878
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(9,1090519040);//[ 9] 0x41000000
 _FLOAT32TOSTRINGADDBCD(8,39340345);//[ 8] 0x02584939
 RETURN;
		};
		IF(E >=-87){
 IF(E >=-86){
			_FLOAT32TOSTRINGADDBCD(9,1895825408);//[ 9] 0x71000000
			_FLOAT32TOSTRINGADDBCD(8,19473513);//[ 8] 0x01292469
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(9,-2059403264);//[ 9] 0x85400000
 _FLOAT32TOSTRINGADDBCD(8,6578740);//[ 8] 0x00646234
 RETURN;
		};
		IF(E >=-88){
 _FLOAT32TOSTRINGADDBCD(9,1114636288);//[ 9] 0x42700000
 _FLOAT32TOSTRINGADDBCD(8,3289367);//[ 8] 0x00323117
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(9,1898971136);//[ 9] 0x71300000
		_FLOAT32TOSTRINGADDBCD(8,1447256);	//[ 8] 0x00161558
		RETURN;
 };
 IF(E >=-94){
		IF(E >=-92){
 IF(E >=-91){
			IF(E >=-90){
 _FLOAT32TOSTRINGADDBCD(9,895942656);	//[ 9] 0x35670000
 _FLOAT32TOSTRINGADDBCD(8,526201);//[ 8] 0x00080779
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(9,1736638464);//[ 9] 0x67830000
			_FLOAT32TOSTRINGADDBCD(8,263049);//[ 8] 0x00040389
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(9,-2087583744);//[ 9] 0x83920000
 _FLOAT32TOSTRINGADDBCD(8,131476);//[ 8] 0x00020194
 RETURN;
		};
		IF(E >=-93){
 _FLOAT32TOSTRINGADDBCD(9,1100349440);//[ 9] 0x41960000
 _FLOAT32TOSTRINGADDBCD(8,65687);	//[ 8] 0x00010097
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(9,1888980992);//[ 9] 0x70979000
		_FLOAT32TOSTRINGADDBCD(8,20552);//[ 8] 0x00005048
		RETURN;
 };
 IF(E >=-96){
		IF(E >=-95){
 _FLOAT32TOSTRINGADDBCD(9,893976576);	//[ 9] 0x35490000
 _FLOAT32TOSTRINGADDBCD(8,9508);//[ 8] 0x00002524
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(9,393498624);//[ 9] 0x17745000
		_FLOAT32TOSTRINGADDBCD(8,4706);//[ 8] 0x00001262
		RETURN;
 };
 IF(E >=-97){
		_FLOAT32TOSTRINGADDBCD(9,143074304);//[ 9] 0x08872400
		_FLOAT32TOSTRINGADDBCD(8,1585);//[ 8] 0x00000631
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(9,1413702144);//[ 9] 0x54436200
 _FLOAT32TOSTRINGADDBCD(8,789);//[ 8] 0x00000315
 RETURN;
	};
	IF(E >=-107){
 IF(E >=-103){
		IF(E >=-101){
 IF(E >=-100){
			IF(E >=-99){
 _FLOAT32TOSTRINGADDBCD(9,1998684416);//[ 9] 0x77218100
 _FLOAT32TOSTRINGADDBCD(8,343);//[ 8] 0x00000157
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(9,-2006937520);	//[ 9] 0x88609050
			_FLOAT32TOSTRINGADDBCD(8,120);	//[ 8] 0x00000078
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(9,1144014128);//[ 9] 0x44304530
 _FLOAT32TOSTRINGADDBCD(8,57);//[ 8] 0x00000039
 RETURN;
		};
		IF(E >=-102){
 _FLOAT32TOSTRINGADDBCD(9,1913987680);//[ 9] 0x72152260
 _FLOAT32TOSTRINGADDBCD(8,25);//[ 8] 0x00000019
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(9,-2046336718);	//[ 9] 0x86076132
		_FLOAT32TOSTRINGADDBCD(8,9);//[ 8] 0x00000009
		RETURN;
 };
 IF(E >=-105){
		IF(E >=-104){
 _FLOAT32TOSTRINGADDBCD(9,-1828487066);//[ 9] 0x93038066
 _FLOAT32TOSTRINGADDBCD(8,4);	//[ 8] 0x00000004
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(9,1179750451);//[ 9] 0x46519033
		_FLOAT32TOSTRINGADDBCD(8,2);//[ 8] 0x00000002
		RETURN;
 };
 IF(E >=-106){
		_FLOAT32TOSTRINGADDBCD(9,589665558);//[ 9] 0x23259516
		_FLOAT32TOSTRINGADDBCD(8,1);//[ 8] 0x00000001
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(10,536870912);//[10] 0x20000000
 _FLOAT32TOSTRINGADDBCD(9,1633851224);//[ 9] 0x61629758
 RETURN;
	};
	IF(E >=-111){
 IF(E >=-109){
		IF(E >=-108){
 _FLOAT32TOSTRINGADDBCD(10,268435456);//[10] 0x10000000
 _FLOAT32TOSTRINGADDBCD(9,813779065);	//[ 9] 0x30814879
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(10,1610612736);	//[10] 0x60000000
		_FLOAT32TOSTRINGADDBCD(9,356545593);//[ 9] 0x15407439
		RETURN;
 };
 IF(E >=-110){
		_FLOAT32TOSTRINGADDBCD(10,2013265920);	//[10] 0x78000000
		_FLOAT32TOSTRINGADDBCD(9,124794649);//[ 9] 0x07703719
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(10,-1996488704);//[10] 0x89000000
 _FLOAT32TOSTRINGADDBCD(9,59054169);//[ 9] 0x03851859
 RETURN;
	};
	IF(E >=-113){
 IF(E >=-112){
		_FLOAT32TOSTRINGADDBCD(10,-1811939328);//[10] 0x94000000
		_FLOAT32TOSTRINGADDBCD(9,26368297);//[ 9] 0x01925929
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(10,-1759510528);//[10] 0x97200000
 _FLOAT32TOSTRINGADDBCD(9,9840996);//[ 9] 0x00962964
 RETURN;
	};
	IF(E >=-114){
 _FLOAT32TOSTRINGADDBCD(10,1214251008);//[10] 0x48600000
 _FLOAT32TOSTRINGADDBCD(9,4723842);//[ 9] 0x00481482
 RETURN;
	};
	_FLOAT32TOSTRINGADDBCD(10,607125504);//[10] 0x24300000
	_FLOAT32TOSTRINGADDBCD(9,2361153);	//[ 9] 0x00240741
	RETURN;
 };
 IF(E >=-132){
	IF(E >=-124){
 IF(E >=-120){
		IF(E >=-118){
 IF(E >=-117){
			IF(E >=-116){
 _FLOAT32TOSTRINGADDBCD(10,1646264320);//[10] 0x62200000
 _FLOAT32TOSTRINGADDBCD(9,1180528);//[ 9] 0x00120370
 RETURN;
			};
			_FLOAT32TOSTRINGADDBCD(10,822607872);//[10] 0x31080000
			_FLOAT32TOSTRINGADDBCD(9,393605);//[ 9] 0x00060185
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(10,1700003840);//[10] 0x65540000
 _FLOAT32TOSTRINGADDBCD(9,196754);//[ 9] 0x00030092
 RETURN;
		};
		IF(E >=-119){
 _FLOAT32TOSTRINGADDBCD(10,846659584);//[10] 0x32770000
 _FLOAT32TOSTRINGADDBCD(9,86086);	//[ 9] 0x00015046
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(10,372789248);//[10] 0x16385000
		_FLOAT32TOSTRINGADDBCD(9,29987);//[ 9] 0x00007523
		RETURN;
 };
 IF(E >=-122){
		IF(E >=-121){
 _FLOAT32TOSTRINGADDBCD(10,1478041600);//[10] 0x58192000
 _FLOAT32TOSTRINGADDBCD(9,14177);	//[ 9] 0x00003761
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(10,2030657536);	//[10] 0x79096000
		_FLOAT32TOSTRINGADDBCD(9,6272);//[ 9] 0x00001880
		RETURN;
 };
 IF(E >=-123){
		_FLOAT32TOSTRINGADDBCD(10,961839360);//[10] 0x39548100
		_FLOAT32TOSTRINGADDBCD(9,2368);//[ 9] 0x00000940
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(10,427245568);//[10] 0x19774000
 _FLOAT32TOSTRINGADDBCD(9,1136);//[ 9] 0x00000470
 RETURN;
	};
	IF(E >=-128){
 IF(E >=-126){
		IF(E >=-125){
 _FLOAT32TOSTRINGADDBCD(10,159936512);//[10] 0x09887000
 _FLOAT32TOSTRINGADDBCD(9,565);//[ 9] 0x00000235
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(10,1418999040);	//[10] 0x54943500
		_FLOAT32TOSTRINGADDBCD(9,279);	//[ 9] 0x00000117
		RETURN;
 };
 IF(E >=-127){
		_FLOAT32TOSTRINGADDBCD(10,2001147728);	//[10] 0x77471750
		_FLOAT32TOSTRINGADDBCD(9,88);//[ 9] 0x00000058
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(10,947083392);//[10] 0x38735880
 _FLOAT32TOSTRINGADDBCD(9,41);//[ 9] 0x00000029
 RETURN;
	};
	IF(E >=-130){
 IF(E >=-129){
		_FLOAT32TOSTRINGADDBCD(10,1765177664);	//[10] 0x69367940
		_FLOAT32TOSTRINGADDBCD(9,20);//[ 9] 0x00000014
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(10,879245673);//[10] 0x34683969
 _FLOAT32TOSTRINGADDBCD(9,7);	//[ 9] 0x00000007
 RETURN;
	};
	IF(E >=-131){
 _FLOAT32TOSTRINGADDBCD(10,1731467653);//[10] 0x67341985
 _FLOAT32TOSTRINGADDBCD(9,3);	//[ 9] 0x00000003
 RETURN;
	};
	_FLOAT32TOSTRINGADDBCD(10,-2090399342);//[10] 0x83670992
	_FLOAT32TOSTRINGADDBCD(9,1);//[ 9] 0x00000001
	RETURN;
 };
 IF(E >=-141){
	IF(E >=-137){
 IF(E >=-135){
		IF(E >=-134){
 IF(E >=-133){
			_FLOAT32TOSTRINGADDBCD(11,536870912);//[11] 0x20000000
			_FLOAT32TOSTRINGADDBCD(10,-1853664106);//[10] 0x91835496
			RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(11,268435456);//[11] 0x10000000
 _FLOAT32TOSTRINGADDBCD(10,1167161160);//[10] 0x45917748
 RETURN;
		};
		_FLOAT32TOSTRINGADDBCD(10,580225140);//[10] 0x22958874
		RETURN;
 };
 IF(E >=-136){
		_FLOAT32TOSTRINGADDBCD(10,289903671);//[10] 0x11479437
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(11,1358954496);//[11] 0x51000000
 _FLOAT32TOSTRINGADDBCD(10,91461400);	//[10] 0x05739718
 RETURN;
	};
	IF(E >=-139){
 IF(E >=-138){
		_FLOAT32TOSTRINGADDBCD(11,620756992);//[11] 0x25000000
		_FLOAT32TOSTRINGADDBCD(10,42375257);//[10] 0x02869859
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(11,1660944384);//[11] 0x63000000
 _FLOAT32TOSTRINGADDBCD(10,21186857);	//[10] 0x01434929
 RETURN;
	};
	IF(E >=-140){
 _FLOAT32TOSTRINGADDBCD(11,-2126512128);//[11] 0x81400000
 _FLOAT32TOSTRINGADDBCD(10,7435364);//[10] 0x00717464
 RETURN;
	};
	_FLOAT32TOSTRINGADDBCD(11,1081081856);	//[11] 0x40700000
	_FLOAT32TOSTRINGADDBCD(10,3508018);//[10] 0x00358732
	RETURN;
 };
 IF(E >=-145){
	IF(E >=-143){
 IF(E >=-142){
		_FLOAT32TOSTRINGADDBCD(11,540016640);//[11] 0x20300000
		_FLOAT32TOSTRINGADDBCD(10,1545062);//[10] 0x00179366
		RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(11,269942784);//[11] 0x10170000
 _FLOAT32TOSTRINGADDBCD(10,562819);//[10] 0x00089683
 RETURN;
	};
	IF(E >=-144){
 _FLOAT32TOSTRINGADDBCD(11,1426653184);//[11] 0x55090000
 _FLOAT32TOSTRINGADDBCD(10,280641);//[10] 0x00044841
 RETURN;
	};
	_FLOAT32TOSTRINGADDBCD(11,2001993728);	//[11] 0x77540000
	_FLOAT32TOSTRINGADDBCD(10,140320);	//[10] 0x00022420
	RETURN;
 };
 IF(E >=-147){
	IF(E >=-146){
 _FLOAT32TOSTRINGADDBCD(11,947322880);//[11] 0x38770000
 _FLOAT32TOSTRINGADDBCD(10,70160);//[10] 0x00011210
 RETURN;
	};
	_FLOAT32TOSTRINGADDBCD(11,423124992);//[11] 0x19386000
	_FLOAT32TOSTRINGADDBCD(10,22021);//[10] 0x00005605
	RETURN;
 };
 IF(E >=-148){
	_FLOAT32TOSTRINGADDBCD(11,1500065792);	//[11] 0x59693000
	_FLOAT32TOSTRINGADDBCD(10,10242);//[10] 0x00002802
	RETURN;
 };
 _FLOAT32TOSTRINGADDBCD(11,696541184);//[11] 0x29846000
 _FLOAT32TOSTRINGADDBCD(10,5121);	//[10] 0x00001401
};

//
//Recursively tests the MSB in significand 'm' with base exponent 'e'.
//
FUNC VOID _FLOAT32TOSTRINGBASE10(VAR INT M,VAR INT E)
{
 IF(!M){
 RETURN;
 };
 IF(M & 8388608){									//0x00800000
	_FLOAT32TOSTRINGADDBIT(E);
 };
 _FLOAT32TOSTRINGBASE10((M & 8388607)<< 1,E - 1);//0x007FFFFF
};

//
//Returns the position [0,95] of the most significant digit, starting at 'i'.
//
FUNC INT _FLOAT32TOSTRINGGETPOS(VAR INT I)
{
 VAR INT A;

 /** /// Unit testing
  if ((i < 0) || (i > 11)) {
    PrintDebug( ConcatStrings( "Float32ToString: GetPos invalid i = ", IntToString( i ) ) );
    return 0;
  };
  /**/
 A=_FLOAT32TOSTRINGGETBCD(I);
 IF(!A){
	RETURN _FLOAT32TOSTRINGGETPOS(I + 1);
 };
 RETURN(I * 8)+ PACKEDBCDLH0COUNT(A);
};

//
//Returns the BCD string from the positions [p,q].
//
FUNC STRING _FLOAT32TOSTRINGGETSTR(VAR INT P,VAR INT Q)
{
 VAR STRING S;

 /** /// Unit testing
  if ((p < 0) || (p > 95)) {
    PrintDebug( ConcatStrings( "Float32ToString: GetStr invalid p = ", IntToString( p ) ) );
    return "?";
  };
  /**/
 //Note: An negativ 'q' is used as internal recursion detection!
 IF(Q < 0){
	Q=-Q;
 } ELSE {
 S="";
 };
 S=CONCATSTRINGS(S,INTTOSTRING(
(_FLOAT32TOSTRINGGETBCD(P / 8)>>((7 -(P % 8))* 4))& 15));
 IF(P >=Q){
	RETURN S;
 };
 _FLOAT32TOSTRINGGETSTR(P + 1,-Q);
};

//
//Convert an IEEE binary32 floating point 'a' to a string.
//
FUNC STRING FLOAT32TOSTRING(VAR INT A)
{
 VAR INT M;
 VAR INT E;
 VAR INT N;
 VAR INT X;
 VAR STRING S;

 M=A & 8388607;//0x007FFFFF
 E=((A >> 23)& 255)- 127;//0x7F800000 - base
 N=(A < 0);//0x80000000
 S=_FLOAT32TOSTRINGPREFIX(N);
 IF(E==128){
	IF(M){
 RETURN "NaN";
	};
	RETURN CONCATSTRINGS(S,"Infinity");
 };
 IF(E==-127){
	IF(M==0){
 S=CONCATSTRINGS(S,INTTOSTRING(0));
 S=CONCATSTRINGS(S,".");
 RETURN CONCATSTRINGS(S,INTTOSTRING(0));
	};
	//Subnormal: (-1)**Sign * (0.Significand / 2**23) * 2**(1-127)
	E=-126;
 } ELSE {
 //Normal: (-1)**Sign * (1.Significand / 2**23) * 2**(Exponent)
 M=M | 8388608;//0x00800000
 };
 _FLOAT32TOSTRINGCLRBCD(0,11);
 _FLOAT32TOSTRINGBASE10(M,E);
 M=_FLOAT32TOSTRINGGETPOS(0);
 //TODO: [NicoDE] Add 1 to the 8-th digit if the 9-th is >= 5.
 //(And - of course - retrieve the new start position again!)
 E=M / 8;
 X=M % 8;
 N=(M + 7)- X;
 X *=4;
 N -=PACKEDBCDRH0COUNT(_FLOAT32TOSTRINGGETBCD(E)>> X);
 IF(X){
	E=_FLOAT32TOSTRINGGETBCD(E + 1)>>(32 - X);
	IF(E){
 N=(M + 7)- PACKEDBCDRH0COUNT(E);
	};
 };
 IF((M <=31)||(N >=48)){
	E=M;
 } ELSE {
	E=39;
	IF(M > 39){
 M=39;
	};
	IF(N < 40){
 N=40;
	};
 };
 S=CONCATSTRINGS(S,_FLOAT32TOSTRINGGETSTR(M,E));
 S=CONCATSTRINGS(S,".");
 S=CONCATSTRINGS(S,_FLOAT32TOSTRINGGETSTR(E + 1,N));
 E -=39;
 IF(E){
	S=CONCATSTRINGS(S,"E");
	S=CONCATSTRINGS(S,INTTOSTRING(-E));
 };
 RETURN S;
};

   